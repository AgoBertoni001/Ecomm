<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Wunion.DataAdapter.NetCore</name>
    </assembly>
    <members>
        <member name="T:Wunion.DataAdapter.Kernel.BatchCommander">
            <summary>
            用于在一个连接上分批执行命令的提供程序.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.BatchCommander.#ctor(Wunion.DataAdapter.Kernel.DataEngine)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.BatchCommander"/> 的对象实例.
            </summary>
            <param name="database">此提供程序使用的数据库引擎.</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.BatchCommander.SCOPE_IDENTITY">
            <summary>
            获取插入到当前会话的最后一个自增长字段的值。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.BatchCommander.ExecuteNonQuery(Wunion.DataAdapter.Kernel.CommandBuilders.DbCommandBuilder)">
            <summary>
            执行命令，并返回受影响记录数.
            </summary>
            <param name="command">要执行的命令的构建器对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.BatchCommander.QueryScalar(Wunion.DataAdapter.Kernel.CommandBuilders.DbCommandBuilder)">
            <summary>
            执行查询命令，返回查询结果中第一行第一列的值，并忽略所有其它的值.
            </summary>
            <param name="command">要执行的命令的构建器对象.</param>
            <returns>返回查询结果中第一行第一列的值，并忽略所有其它的值.</returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.BatchCommander.ExecuteReader(Wunion.DataAdapter.Kernel.CommandBuilders.DbCommandBuilder)">
            <summary>
            执行查询命令，并返回一个数据读取器.
            </summary>
            <param name="command">要执行的命令的构建器对象.</param>
            <returns>返回一个数据读取器.</returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.BatchCommander.TableExists(System.String)">
            <summary>
            若指定名称的表在数据库中存在则返回 true，否则返回 false.
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.BatchCommander.DropTable(System.String)">
            <summary>
            从数据库中删除指定的表.
            </summary>
            <param name="tableName">表名称.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.BatchCommander.Dispose(System.Boolean)">
            <summary>
            释放对象所占用的资源.
            </summary>
            <param name="disposing">手动调用则为 true，由对象终结器调用时则为 false .</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.BatchCommander.Dispose">
            <summary>
            释放对象所占用的资源.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.BatchCommander.Finalize">
            <summary>
            对象终结器（析构函数）.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CodeFirst.DataReaderExtensions">
            <summary>
            用于扩展 <see cref="!:ID"/>
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DataReaderExtensions.SetEntityProperty(Wunion.DataAdapter.Kernel.DataEngine,Wunion.DataAdapter.Kernel.CodeFirst.TableFieldAttribute,System.Reflection.PropertyInfo,System.Type,System.Object,System.Object)">
            <summary>
            将指定的指进行类型转换并赋值到实体对象的属性.
            </summary>
            <param name="db">数据库引擎对象.</param>
            <param name="attr">实体对象属性的数据库映射标签特性.</param>
            <param name="pi">实体对象的属性信息.</param>
            <param name="propertyType">该属性的类型.</param>
            <param name="value">要转换并设置到该属性的值.</param>
            <param name="entity">实体的对象实体.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DataReaderExtensions.ToEntityList``1(System.Data.IDataReader,Wunion.DataAdapter.Kernel.DataEngine)">
            <summary>
            将数据构建为指定的实体列表.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="reader"><see cref="T:System.Data.IDataReader"/> 数据读取器.</param>
            <param name="db">数据库引擎对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DataReaderExtensions.ToList``1(System.Data.IDataReader,Wunion.DataAdapter.Kernel.DataEngine)">
            <summary>
            将数据构建为指定的对象集合.
            </summary>
            <typeparam name="T">目标对象类型.</typeparam>
            <param name="reader"></param>
            <param name="db">数据引擎对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DataReaderExtensions.ToDynamicList(System.Data.IDataReader,System.Func{System.String,System.Object,System.Type,System.Object})">
            <summary>
            将数据读取并构建为动态实体集合.
            </summary>
            <param name="reader">数据读取器.</param>
            <param name="converter">用于转换字段的值.</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CodeFirst.DbContext">
            <summary>
            数据库上下文对象.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CodeFirst.DbContext.SCHEMA_VERSION_NAME">
            <summary>
            架构信息表的名称.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbContext.#ctor(Wunion.DataAdapter.Kernel.DataEngine)">
            <summary>
            创建一个数据库上下文对象.
            </summary>
            <param name="engine">数据库引擎对象.</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.DbContext.DbEngine">
            <summary>
            获取数据库引擎对象.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbContext.TableDeclaration``1(System.String)">
            <summary>
            获取或定义数据库中的表.
            </summary>
            <typeparam name="TEntity">表记录对应的实体类型.</typeparam>
            <param name="tableName">获取已定义的表时上参数应为 null，定义数据库表时则必须指定此参数.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbContext.GetCreateTableCommand(System.Type,System.String)">
            <summary>
            获取为指定类型的实体在数据库中创建表的命令.
            </summary>
            <param name="entityType">实体的类型.</param>
            <param name="tableName">表名称.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbContext.ThrowIfDbException(System.Object,System.Int32)">
            <summary>
            若在与数据库交互的过程中产生了错误时，检测并触发异常.
            </summary>
            <param name="sender">产生错误的 <see cref="T:Wunion.DataAdapter.Kernel.DataEngine"/> 或 <see cref="T:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController"/> 对象.</param>
            <param name="result">数据库返回的执行结果状态码（值为非 -1 则表示未产生错误）.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbContext.CreateTable(System.String,System.Type,System.Object)">
            <summary>
            在数据库中创建表.
            </summary>
            <param name="tableName">表名.</param>
            <param name="enityType">定义该表的实体类型.</param>
            <param name="dest">表示执行此操作的 <see cref="T:Wunion.DataAdapter.Kernel.BatchCommander"/> 批处理器或 <see cref="T:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController"/>事务控制器，为空则表示不在批处理或事务中执行.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbContext.CreateTable``1(System.String,System.Object)">
            <summary>
            在该数据库中创建表.
            </summary>
            <typeparam name="TEntity">该表对应的实体类型.</typeparam>
            <param name="tableName">表名.</param>
            <param name="dest">表示执行此操作的 <see cref="T:Wunion.DataAdapter.Kernel.BatchCommander"/> 批处理器或 <see cref="T:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController"/>事务控制器，为空则表示不在批处理或事务中执行.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbContext.DropTable(System.String,System.Object)">
            <summary>
            从数据库中删除指定的表.
            </summary>
            <param name="tableName"></param>
            <param name="dest"></param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbContext.OnBeforeGenerating(Wunion.DataAdapter.Kernel.CodeFirst.IGeneratingOptions)">
            <summary>
            用于实现在创建或更新数据库架构前要执行的操作（若未正确实现此方法则 CodeFirst 工具将无法连接到数据库）.
            </summary>
            <param name="options">生成数据库架构及实体查询数据访问器代码所必须的选项设置.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbContext.OnGenerateCompleted(System.Action{System.String})">
            <summary>
            当 CodeFirst 工具完成数据库生成时调用此方法（用于向数据库中预置数据）.
            </summary>
            <param name="log">用于输出日志.</param>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CodeFirst.DbConversionMapping">
            <summary>
            用于映射实体对象与数据库表中的行之间的关系.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.DbConversionMapping.Property">
            <summary>
            实体对象的属性信息.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.DbConversionMapping.Attribute">
            <summary>
            实体对象属性与数据库字段的映射信息.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.DbConversionMapping.Identity">
            <summary>
            字段的自动编号设置.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.DbConversionMapping.ForeignKey">
            <summary>
            字段的外键约束设置.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbConversionMapping.#ctor(System.Reflection.PropertyInfo,Wunion.DataAdapter.Kernel.CodeFirst.TableFieldAttribute)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CodeFirst.DbConversionMapping"/> 的对象实例.
            </summary>
            <param name="pi"></param>
            <param name="attr"></param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbConversionMapping.Get(System.Type)">
            <summary>
            获取指定类型的实体的数据库映射信息集合.
            </summary>
            <param name="entityType">实体的类型.</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CodeFirst.DbSchemaVersion">
            <summary>
            表示数据库架构的版本信息.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbSchemaVersion.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CodeFirst.DbSchemaVersion"/> 的对象实例.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.DbSchemaVersion.Name">
            <summary>
            表示该版本的名称描述.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.DbSchemaVersion.Version">
            <summary>
            表示版本号.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.DbSchemaVersion.Creation">
            <summary>
            表示该版本的创建日期.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CodeFirst.DbSchemaVersionDao">
            <summary>
            数据库架构查询访问器.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbSchemaVersionDao.#ctor(Wunion.DataAdapter.Kernel.CodeFirst.DbContext)">
            <summary>
            创建一个数据库架构查询访问器.
            </summary>
            <param name="dbc">数据库上下文对象.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbSchemaVersionDao.#ctor">
            <summary>
            创建一个数据库架构查询访问器.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.DbSchemaVersionDao.EntityType">
            <summary>
            获取该查询访问器对应的实体类型.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.DbSchemaVersionDao.Name">
            <summary>
            表示该版本的名称描述.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.DbSchemaVersionDao.Version">
            <summary>
            表示版本号.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.DbSchemaVersionDao.Creation">
            <summary>
            表示该版本的创建日期.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbSchemaVersionDao.GetTableContext(System.String)">
            <summary>
            获取该数据访问器对应的表上下文对象.
            </summary>
            <param name="name">表名称（为 null 则返回符合该查询访问器的第一个表上下文）.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbSchemaVersionDao.GetAllFields">
            <summary>
            获取所有字段.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CodeFirst.IDbTableContext">
            <summary>
            用于实现数据库表上下文的接口.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.IDbTableContext.db">
            <summary>
            数据库引擎对象.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.IDbTableContext.tableName">
            <summary>
            获取表名称.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.IDbTableContext.QueryFields">
            <summary>
            该表的所有查询字段信息（避免在查询中使用 select * from ...）
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CodeFirst.DbTableContext`1">
            <summary>
            表示数据库中的表.
            </summary>
            <typeparam name="TEntity">该表对应的实体类型.</typeparam>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.DbTableContext`1.db">
            <summary>
            数据库引擎对象.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.DbTableContext`1.tableName">
            <summary>
            表示该表在数据库中的表名.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.DbTableContext`1.QueryFields">
            <summary>
            该表的所有查询字段信息（避免在查询中使用 select * from ...）
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.DbTableContext`1.EntityType">
            <summary>
            获取该表对应的实体类型.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbTableContext`1.#ctor(Wunion.DataAdapter.Kernel.CodeFirst.DbContext,System.String)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CodeFirst.DbTableContext`1" /> 数据库表的对象实例.
            </summary>
            <param name="dbEngine">数据库对象.</param>
            <param name="name">该表在数据库中的表名.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbTableContext`1.ThrowExceptionExecResult(System.Int32,Wunion.DataAdapter.Kernel.DbError)">
            <summary>
            根据查询的执行结果，若产生错误则抛出异常.
            </summary>
            <param name="code">查询执行的结果状态.</param>
            <param name="err">错误信息.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbTableContext`1.ConvertToDbValue(Wunion.DataAdapter.Kernel.CodeFirst.DbConversionMapping,System.Object)">
            <summary>
            将值转换为数据库中对应的类型.
            </summary>
            <param name="mp">字段与实体属性的映射对象.</param>
            <param name="value">要转换的值.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbTableContext`1.ExecuteCommand(Wunion.DataAdapter.Kernel.CommandBuilders.DbCommandBuilder,System.Object)">
            <summary>
            执行指定的命令并返回受影响的记录数.
            </summary>
            <param name="cb">已构建的命令.</param>
            <param name="controller">执行数据插入的事务控制器(<see cref="T:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController"/>)或批处理(<see cref="T:Wunion.DataAdapter.Kernel.BatchCommander"/>)对象.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbTableContext`1.GetDbConversionMappings">
            <summary>
            获取实体的字段映射.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbTableContext`1.GetQueryFields">
            <summary>
            获取指定实体的所有查询字段信息（避免在查询中使用 select * from ...）
            </summary>
            <typeparam name="T">实体的类型名称.</typeparam>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbTableContext`1.Add(`0,System.Object)">
            <summary>
            将指定的实体插入到指定的表中.
            </summary>
            <param name="entity">实体对象.</param>
            <param name="controller">执行数据插入的事务控制器(<see cref="T:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController"/>)或批处理(<see cref="T:Wunion.DataAdapter.Kernel.BatchCommander"/>)对象.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbTableContext`1.AddAsync(`0,System.Object)">
            <summary>
            将指定的实体插入到指定的表中（异步方法）.
            </summary>
            <param name="entity">实体对象.</param>
            <param name="controller">执行数据插入的事务控制器(<see cref="T:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController"/>)或批处理(<see cref="T:Wunion.DataAdapter.Kernel.BatchCommander"/>)对象.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbTableContext`1.Update(`0,System.Object)">
            <summary>
            将指定的实体更新到数据库中.
            </summary>
            <param name="entity">实体对象.</param>
            <param name="controller">执行数据插入的事务控制器(<see cref="T:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController"/>)或批处理(<see cref="T:Wunion.DataAdapter.Kernel.BatchCommander"/>)对象.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbTableContext`1.UpdateAsync(`0,System.Object)">
            <summary>
            将指定的实体更新到数据库中（异步方法）.
            </summary>
            <param name="entity">实体对象.</param>
            <param name="controller">执行数据插入的事务控制器(<see cref="T:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController"/>)或批处理(<see cref="T:Wunion.DataAdapter.Kernel.BatchCommander"/>)对象.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbTableContext`1.Delete``1(System.Func{``0,System.Object[]},System.Object)">
            <summary>
            从数据库中删除指定条件的数据.
            </summary>
            <param name="conditions">用于确定删除条件.</param>
            <param name="controller">执行数据插入的事务控制器(<see cref="T:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController"/>)或批处理(<see cref="T:Wunion.DataAdapter.Kernel.BatchCommander"/>)对象.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbTableContext`1.DeleteAsync``1(System.Func{``0,System.Object[]},System.Object)">
            <summary>
            从数据库中删除指定条件的数据.
            </summary>
            <param name="conditions">用于确定删除条件.</param>
            <param name="controller">执行数据插入的事务控制器(<see cref="T:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController"/>)或批处理(<see cref="T:Wunion.DataAdapter.Kernel.BatchCommander"/>)对象.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbTableContext`1.Count``1(System.Func{``0,System.Object[]},System.Object)">
            <summary>
            查询符合条件的记录数量.
            </summary>
            <param name="conditions">条件.</param>
            <param name="controller">执行数据插入的事务控制器(<see cref="T:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController"/>)或批处理(<see cref="T:Wunion.DataAdapter.Kernel.BatchCommander"/>)对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbTableContext`1.CountAsync``1(System.Func{``0,System.Object[]},Wunion.DataAdapter.Kernel.BatchCommander)">
            <summary>
            查询符合条件的记录数量（异步方法）.
            </summary>
            <param name="conditions">条件.</param>
            <param name="batch">在此批处理中执行查询.</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CodeFirst.ForeignKeyAttribute">
            <summary>
            用于标记字段的外键映射信息.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CodeFirst.ForeignKeyAttribute.ACTION_CASCADE">
            <summary>
            当删除父表中的记录时允许删除子表中的记录，当更新父表中的记录时时允许交叉更新子表.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CodeFirst.ForeignKeyAttribute.ACTION_SET_NULL">
            <summary>
            当删除或更新父表中的记录值时，将子表中的记录值设置为 NULL （前提是该字段支持 NULL 值）.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CodeFirst.ForeignKeyAttribute.ACTION_RESTRICT">
            <summary>
            拒绝删除或更新子表中的记录.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.ForeignKeyAttribute.TableName">
            <summary>
            外键映射的表名称.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.ForeignKeyAttribute.Field">
            <summary>
            从表的映射字段名称.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.ForeignKeyAttribute.OnDeleteAction">
            <summary>
            当父表中的记录被删除时的行为.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.ForeignKeyAttribute.OnUpdateAction">
            <summary>
            当父表中的记录被更新时的行为.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.ForeignKeyAttribute.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CodeFirst.ForeignKeyAttribute"/> 的对象实例.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.ForeignKeyAttribute.CreateForeignKey">
            <summary>
            创建外键约束描述对象.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CodeFirst.GenerateOrderAttribute">
            <summary>
            用于表示数据表或字段的生成顺序.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.GenerateOrderAttribute.#ctor(System.Int32)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CodeFirst.GenerateOrderAttribute"/> 的地象实例.
            </summary>
            <param name="index">顺序的索引值（从 0 开始）.</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.GenerateOrderAttribute.Index">
            <summary>
            顺序的索引值（从 0 开始）.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CodeFirst.IDbTableMigrator">
            <summary>
            用于实现在 CodeFirst 重建表时的数据迁移.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.IDbTableMigrator.OnBeforeGenerating(Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController,Wunion.DataAdapter.Kernel.CodeFirst.DbTableMigratorEventArgs)">
            <summary>
            在重建表前执行的操作（通常用于查询并备份表中的数据）.
            </summary>
            <param name="trans">用于执行命令的事务控制器.</param>
            <param name="e">本次表迁移相关的参数信息.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.IDbTableMigrator.OnGenerateCompleted(Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController,Wunion.DataAdapter.Kernel.CodeFirst.DbTableMigratorEventArgs)">
            <summary>
            在重建表完成后执行的操作（通常用于重新写入备份的数据）.
            </summary>
            <param name="trans">用于执行命令的事务控制器.</param>
            <param name="e">本次表迁移相关的参数信息.</param>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CodeFirst.DbTableMigratorEventArgs">
            <summary>
            用于数据表迁移事件的参数传递.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbTableMigratorEventArgs.#ctor(System.String,System.Int32,System.Int32,System.Action{System.String})">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CodeFirst.DbTableMigratorEventArgs"/> 的对象实例.
            </summary>
            <param name="table">表名.</param>
            <param name="ver">现有的架架构版本.</param>
            <param name="newVer">将要升级到的架构版本.</param>
            <param name="_logger">用于输出日志.</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.DbTableMigratorEventArgs.tableName">
            <summary>
            正在迁移的表名称.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.DbTableMigratorEventArgs.SchemaVersion">
            <summary>
            现有的数据库架构版本.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.DbTableMigratorEventArgs.UpgradeVersion">
            <summary>
            要升级到的数据库版本.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.DbTableMigratorEventArgs.Log(System.String)">
            <summary>
            向 CodeFirst 工具输出迁移日志.
            </summary>
            <param name="message">要输出的日志消息.</param>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Wunion.DataAdapter.Kernel.CodeFirst.DbTableMigratorEventArgs.Create(System.String,System.Int32,System.Int32,System.Action{System.String})" -->
        <member name="T:Wunion.DataAdapter.Kernel.CodeFirst.IdentityAttribute">
            <summary>
            用于标记自增序列字段.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.IdentityAttribute.InitValue">
            <summary>
            自增长的初始值.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.IdentityAttribute.Increment">
            <summary>
            自动增长的增量值.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.IdentityAttribute.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CodeFirst.IdentityAttribute"/> 的对象实例.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.IdentityAttribute.#ctor(System.Int32,System.Int32)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CodeFirst.IdentityAttribute"/> 的对象实例.
            </summary>
            <param name="init">初始值.</param>
            <param name="inc">递增步长.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.IdentityAttribute.CreateDbIdentity">
            <summary>
            创建数据库的自增长信息.
            </summary>
            <returns></returns>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.IDbGenerateOption.Kind">
            <summary>
            目标数据库的种类（mssql | mysql | npgsql | sqlite3）.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.IDbGenerateOption.ConnectionString">
            <summary>
            目标数据库的连接符串.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.IDbGenerateOption.ReCreateExistingTable">
            <summary>
            删除并重新创建已存在的表.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.IDbGenerateOption.SchemaVersion">
            <summary>
            用于定义数据库架构的版本号.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CodeFirst.IGeneratingOptions">
            <summary>
            用于配置数据库及代码生成选项的对象接口.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.IGeneratingOptions.Database">
            <summary>
            生成时的目标数据库配置选项.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.IGeneratingOptions.DaoGenerateNamespace">
            <summary>
            生成的实体查询 DAO 数据访问器所使用的命名空间.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.IGeneratingOptions.DaoGenerateDirectory">
            <summary>
            生成的实体查询 DAO 数据访问器的相对路径（从实体定义所在的目标项目的根目标开始）.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.IGeneratingOptions.TableUpgradeMigrator">
            <summary>
            用于实现在表升级重建时的数据迁移.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CodeFirst.TableFieldAttribute">
            <summary>
            用于映身数据库与实体的关系映射.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.TableFieldAttribute.Name">
            <summary>
            字段名.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.TableFieldAttribute.DbType">
            <summary>
            字段数据类型
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.TableFieldAttribute.Default">
            <summary>
            默认值.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.TableFieldAttribute.PrimaryKey">
            <summary>
            是否为主键.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.TableFieldAttribute.NotNull">
            <summary>
            非空字段.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.TableFieldAttribute.Unique">
            <summary>
            是否唯一.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.TableFieldAttribute.Size">
            <summary>
            字段长度.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CodeFirst.TableFieldAttribute.ValueConverter">
            <summary>
            该字段的值类型转换器.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CodeFirst.TypeExtensions">
            <summary>
            用于扩展 <see cref="T:System.Type"/> 对象实例的方法.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CodeFirst.TypeExtensions.PublicInstanceProperties(System.Type)">
            <summary>
            获取此类型的公共非静态属性（搜索基础）.
            </summary>
            <param name="type">类型</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.DeleteBlock">
            <summary>
            用于描述 Delete 命令段的对象类型（多表删除暂不支持）。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.DeleteBlock.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.DeleteBlock"/> 的对象实例。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.DeleteBlock.Table">
            <summary>
            获取或设置表信息。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.DeleteBlock.Conditions">
            <summary>
            获取删除命令的 Where  段。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.DeleteBlock.Where(System.Object[])">
            <summary>
            设置命令的 Where 条件信息。
            </summary>
            <param name="content">条件信息。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.FromBlock">
            <summary>
            用于描述 FROM 子句段的对象类型。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FromBlock.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.FromBlock"/> 的对象实例。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.FromBlock.Content">
            <summary>
            获取或设置 FROM 子句的内容。
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.GroupByBlock">
            <summary>
            用于描述分组子句的对象类型。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.GroupByBlock.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.GroupByBlock"/> 的对象实例。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.GroupByBlock.Fields">
            <summary>
            获取分组所需的字段类型。
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.InsertBlock">
            <summary>
            用于描述 INSERT 命令的对象类型。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.InsertBlock.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.InsertBlock"/> 的对象实例。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.InsertBlock.Table">
            <summary>
            获取或设置要插和的表名。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.InsertBlock.Fields">
            <summary>
            获取或设置 INSERT 段的字段名。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.InsertBlock.InValues">
            <summary>
            获取插入的值信息。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.InsertBlock.Values(System.Object[])">
            <summary>
            设置插入的值信息。
            </summary>
            <param name="values"></param>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.OrderByMode">
            <summary>
            表示 Order By 排序方式的枚举类型。
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.OrderByMode.ASC">
            <summary>
            表示升序。
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.OrderByMode.DESC">
            <summary>
            表示降序
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.OrderByBlock">
            <summary>
            用于描述 ORDER BY 子句的对象类型。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.OrderByBlock.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.OrderByBlock"/> 的对象实例。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.OrderByBlock.Field">
            <summary>
            获取或设置排序的字段。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.OrderByBlock.Sort">
            <summary>
            获取或设置排序类型。
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.PageContext">
            <summary>
            内容分页信息对象类型。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.PageContext.#ctor(System.Int32,System.Int32)">
            <summary>
            实例化一个内容分页器。
            </summary>
            <param name="page_size">每页条目数量。</param>
            <param name="current_page">当前页。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.PageContext.#ctor(System.Int32,System.Int32,Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription,Wunion.DataAdapter.Kernel.CommandBuilders.OrderByMode)">
            <summary>
            实例化一个内容分页器（SQL 2000 及 Microsoft Access分页兼容，其它数据库不必使用此方法）。
            </summary>
            <param name="page_size">每页条目数量。</param>
            <param name="current_page">当前页。</param>
            <param name="helpField">分页的辅助字段信息。</param>
            <param name="helpSort">分页辅助字段的排序模式。</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.PageContext.PageSize">
            <summary>
            获取分页时的每页条目数量。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.PageContext.CurrentPage">
            <summary>
            获取当前页。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.PageContext.HelpField">
            <summary>
            获取分页的辅助字段信息。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.PageContext.HelpSort">
            <summary>
            获取分页辅助字段的排序模式。
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.SelectBlock">
            <summary>
            用于描述 SELECT 命令的对象类型。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.SelectBlock.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.SelectBlock"/> 的对象类型。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.SelectBlock.Blocks">
            <summary>
            获取或设置 SELECT 的子句。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.SelectBlock.Pager">
            <summary>
            获取分页信息。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.SelectBlock.AddElement(Wunion.DataAdapter.Kernel.CommandBuilders.IDescription)">
            <summary>
            向 SELECT 语句中添加元素。
            </summary>
            <param name="element">要添加的元素对象。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.SelectBlock.From(System.String)">
            <summary>
            设置 SELECT 语句的 FROM 子句（适用于单表查询）。
            </summary>
            <param name="tableName">要查询的表名称。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.SelectBlock.From(Wunion.DataAdapter.Kernel.CommandBuilders.IDescription[])">
            <summary>
            设置 SELECT 语句的 FROM 子句（适用于多表查询）。
            </summary>
            <param name="content">FROM段的内容。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.SelectBlock.Where(System.Object[])">
            <summary>
            设置 SELECT 的 WHERE 子句。
            </summary>
            <param name="content">WHERE条件内容。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.SelectBlock.GroupBy(Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription[])">
            <summary>
            设置 SELECT 的 GROUP BY 子句。
            </summary>
            <param name="fields">字段列表。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.SelectBlock.OrderBy(Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription,Wunion.DataAdapter.Kernel.CommandBuilders.OrderByMode)">
            <summary>
            获取或设置 SELECT 的 ORDER BY 子句。
            </summary>
            <param name="field">排序字段。</param>
            <param name="sort">排序模式。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.SelectBlock.Paging(System.Int32,System.Int32)">
            <summary>
            为查询设置分页信息。
            </summary>
            <param name="page_size">每页的条目数量。</param>
            <param name="current_page">当前页（从第一页开始）。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.SelectBlock.Paging(System.Int32,System.Int32,Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription,Wunion.DataAdapter.Kernel.CommandBuilders.OrderByMode)">
            <summary>
            为查询设置分页信息（SQL 2000 及 Microsoft Access分页兼容，其它数据库不必使用此方法）。
            </summary>
            <param name="page_size">每页的条目数量。</param>
            <param name="current_page">当前页（从第一页开始）。</param>
            <param name="helpField">用于辅助分页的字段（某些数据库需要字段来辅助分页,将使排序设置失效）。</param>
            <param name="helpSort">辅助分页字段的排序模式。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.SetBlock">
            <summary>
            用于描述 Set 子句的对象类型。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.SetBlock.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.SetBlock"/> 的对象实例。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.SetBlock.Expressions">
            <summary>
            获取或设置 Set 后的表达式。
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.TableBuildDescription">
            <summary>
            用于描述 CREATE TABLE 命令的对象类型.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.TableBuildDescription.#ctor(System.String)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.TableBuildDescription"/> 的对象实例.
            </summary>
            <param name="name">表名.</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.TableBuildDescription.Name">
            <summary>
            获取表名称.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.TableBuildDescription.ColumnDefinitions">
            <summary>
            获取列定义信息.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.TableBuildDescription.ColumnsDefine(Wunion.DataAdapter.Kernel.CommandBuilders.DbTableColumnDefinition[])">
            <summary>
            定义该表的列.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.DbTableColumnDefinition">
            <summary>
            表示创建表时对列的定义信息.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.DbTableColumnDefinition.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.DbTableColumnDefinition"/> 的对象实例.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.DbTableColumnDefinition.Name">
            <summary>
            列名称.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.DbTableColumnDefinition.DataType">
            <summary>
            列的数据类型.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.DbTableColumnDefinition.Size">
            <summary>
            数据的长度（某些数据类型指定该长度可能会导致错误）.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.DbTableColumnDefinition.NotNull">
            <summary>
            不允许为空则为 true，否则应为 false .
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.DbTableColumnDefinition.Unique">
            <summary>
            该列的值是否唯一.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.DbTableColumnDefinition.PrimaryKey">
            <summary>
            该列是否为主键（将多个列设定为主键时将自动产生联合主键）.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.DbTableColumnDefinition.Identity">
            <summary>
            自动增长设置.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.DbTableColumnDefinition.Default">
            <summary>
            列的默认值（要指定当前日期时间为默认值时可使用 Fun.Now() 函数，若为所有二进制类型的列指定默认值将引发异常）.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.DbTableColumnDefinition.ForeignKey">
            <summary>
            外键设置.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.DbTableColumnDefinition.New(System.String,Wunion.DataAdapter.Kernel.CommandBuilders.GenericDbType,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Object,Wunion.DataAdapter.Kernel.CommandBuilders.DbColumnIdentity,Wunion.DataAdapter.Kernel.CommandBuilders.DbForeignKey)">
            <summary>
            创建一个新的列定义.
            </summary>
            <param name="name">列名称.</param>
            <param name="dataType">数据类型.</param>
            <param name="size">数据的长度（某些数据类型指定该长度可能会导致错误）.</param>
            <param name="notNull">不允许为空则为 true，否则应为 false .</param>
            <param name="unique">该列的值是否唯一.</param>
            <param name="pk">该列是否为主键（将多个列设定为主键时将自动产生联合主键）.</param>
            <param name="Default">列的默认值（要指定当前日期时间为默认值时可使用 Fun.Now() 函数，若为所有二进制类型的列指定默认值将引发异常）.</param>
            <param name="identity">自动增长设置.</param>
            <param name="fk">外键设置.</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.DbColumnIdentity">
            <summary>
            表示数据库列的自动增长对象信息.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.DbColumnIdentity.#ctor(System.Int32,System.Int32)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.DbColumnIdentity"/> 的对象实例.
            </summary>
            <param name="m">自增长的初始值.</param>
            <param name="n">自动增长的增量值.</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.DbColumnIdentity.InitValue">
            <summary>
            自增长的初始值.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.DbColumnIdentity.Increment">
            <summary>
            自动增长的增量值.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.DbForeignKey">
            <summary>
            表示数据库的外键约束信息.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.DbForeignKey.#ctor(System.String,System.String,System.String,System.String)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.DbForeignKey"/> 的对象实例.
            </summary>
            <param name="table">外键关联的表名.</param>
            <param name="column">外键关联表的字段名.</param>
            <param name="update">主表字段更新时的处理行为（具体设置请参考各类数据库的外键设置料资）.</param>
            <param name="delete">主表字段删除时的处理行为（具体设置请参考各类数据库的外键设置料资）.</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.DbForeignKey.Table">
            <summary>
            外键关联的表名.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.DbForeignKey.Column">
            <summary>
            外键关联表的字段名.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.DbForeignKey.OnUpdate">
            <summary>
            字段更新时的处理行为.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.DbForeignKey.OnDelete">
            <summary>
            字段删除时的处理行为.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.UpdateBlock">
            <summary>
            用于描术 UPDATE 命令的对象类型。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.UpdateBlock.Blocks">
            <summary>
            获取命令中的分段列表。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.UpdateBlock.AddTable(Wunion.DataAdapter.Kernel.CommandBuilders.TableDescription)">
            <summary>
            向命令中添加一个表。
            </summary>
            <param name="table"></param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.UpdateBlock.Set(Wunion.DataAdapter.Kernel.CommandBuilders.IDescription[])">
            <summary>
            设置字符的更新信息。
            </summary>
            <param name="expressions"></param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.UpdateBlock.Where(System.Object[])">
            <summary>
            设置更新的条件信息。
            </summary>
            <param name="content"></param>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.WhereBlock">
            <summary>
            用于描述 WHERE 子句段的对象类型。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.WhereBlock.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.WhereBlock"/> 的对象类型。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.WhereBlock.Content">
            <summary>
            获取或设置 WHERE 子句的内容。
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder">
            <summary>
            命令构建器的基础对象类型（由此派生普通的 SQL 命令构建器或存储过程构建器）。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder"/> 的对象类型。由派生类型继承。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder.CommandParameters">
            <summary>
            获取命令的参数集合（该集合的内容将在调用 Parsing 方法后产生）。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder.IsParsed">
            <summary>
            获取一个值，该值指示命令是否已经被解释过。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder.CommandType">
            <summary>
            获取该构建器所构建的命令类型。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder.IdentityCommand">
            <summary>
            获取用于查询当前会话的最后一个自增长字段值的命令。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder.ResetCommandBuilder">
            <summary>
            重置命令构建器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder.Parsing(Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            解释整个命令，同时创建该命令应有的参数并返回命令文本。
            </summary>
            <param name="adapter">解释命令所需的适配器。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.DbCommandBuilder">
            <summary>
            表示一个普通的 SQL 命令构建器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.DbCommandBuilder.#ctor">
            <summary>
            实例化一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.DbCommandBuilder"/> 的对象实例。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.DbCommandBuilder.CommandType">
            <summary>
            获取该命令构建器构建的命令类型。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.DbCommandBuilder.CreateTable(System.String)">
            <summary>
            用于构建创建表 CREATE TABLE 命令.
            </summary>
            <param name="name">表名.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.DbCommandBuilder.Insert(Wunion.DataAdapter.Kernel.CommandBuilders.TableDescription,Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription[])">
            <summary>
            开始构建 INSERT 命令。
            </summary>
            <param name="table">表信息。</param>
            <param name="fields">字段列表。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.DbCommandBuilder.Insert(System.String,Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription[])">
            <summary>
            开始构建 INSERT 命令。
            </summary>
            <param name="tableName">表名称。</param>
            <param name="fields">字段列表。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.DbCommandBuilder.Delete(Wunion.DataAdapter.Kernel.CommandBuilders.TableDescription)">
            <summary>
            开始构建 DELETE 命令。
            </summary>
            <param name="table">表信息。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.DbCommandBuilder.Delete(System.String)">
            <summary>
            开始构建 DELETE 命令。
            </summary>
            <param name="tableName">表名称。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.DbCommandBuilder.Update(Wunion.DataAdapter.Kernel.CommandBuilders.TableDescription)">
            <summary>
            开始构建 UPDATE 命令。
            </summary>
            <param name="table">表信息。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.DbCommandBuilder.Update(System.String)">
            <summary>
            开始构建 UPDATE 命令。
            </summary>
            <param name="tableName">表名称。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.DbCommandBuilder.Select(Wunion.DataAdapter.Kernel.CommandBuilders.IDescription[])">
            <summary>
            开始构建 SELECT 命令。
            </summary>
            <param name="fields">要查询的字段列表（可以为字段信息入表达式对象）。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.DbCommandBuilder.Nested(Wunion.DataAdapter.Kernel.CommandBuilders.IDescription[])">
            <summary>
            构建一个用于嵌套查询的子查询 [与Select(...)方法的构建方式一致]。
            </summary>
            <param name="fields">要查询的字段列表。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.AsElementDecsription">
            <summary>
            用于描述一个 As 元素信息的对象类型。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.AsElementDecsription.#ctor">
            <summary>
            创建 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.AsElementDecsription"/> 的对象实例。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.AsElementDecsription.AsName">
            <summary>
            获取或设置别名名称。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.AsElementDecsription.Objective">
            <summary>
            欲将其以AS别名描述的对象（可以是其它元素或一个任意的值）。
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription">
            <summary>
            用于描述命令中的表达式的对象类型。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription"/> 的对象类型。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription.ExpElements">
            <summary>
            获取或设置表达式中的各个元素集合。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription.Not">
            <summary>
            对该表达式使用逻辑非运算
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription.As(System.String)">
            <summary>
            表达式的 As 别名（如：SELECT [MONEY] / 1000 AS [K_MONEY] ....，中的 K_MONEY）。
            </summary>
            <param name="Name">别名名称。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription.op_Equality(Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription,System.Object)">
            <summary>
            创建等于运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription.op_Inequality(Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription,System.Object)">
            <summary>
            创建不等于运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription.op_GreaterThan(Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription,System.Object)">
            <summary>
            创建大于关系运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription.op_GreaterThanOrEqual(Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription,System.Object)">
            <summary>
            创建大于等于关系运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription.op_LessThan(Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription,System.Object)">
            <summary>
            创建小于关系运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription.op_LessThanOrEqual(Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription,System.Object)">
            <summary>
            创建小于等于关系运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription.op_Addition(Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription,System.Object)">
            <summary>
            创建加法运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription.op_Subtraction(Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription,System.Object)">
            <summary>
            创建减法运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription.op_Multiply(Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription,System.Object)">
            <summary>
            创建乘法运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription.op_Division(Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription,System.Object)">
            <summary>
            创建除法运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription.op_BitwiseAnd(Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription,System.Object)">
            <summary>
            创建逻辑与运算表达式.
            </summary>
            <param name="left">左操作数对象.</param>
            <param name="right">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription.op_BitwiseOr(Wunion.DataAdapter.Kernel.CommandBuilders.ExpDescription,System.Object)">
            <summary>
            创建逻辑或运算表达式.
            </summary>
            <param name="left">左操作数对象.</param>
            <param name="right">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.LikeMatch">
            <summary>
            LIKE 子句的匹配模式。
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.LikeMatch.Left">
            <summary>
            左匹配。
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.LikeMatch.Center">
            <summary>
            中匹配。
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.LikeMatch.Right">
            <summary>
            右匹配。
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.LikeDescription">
            <summary>
            用于描述 LIKE 子句的对象类型。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.LikeDescription.Field">
            <summary>
            LIKE 子句的字段。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.LikeDescription.Content">
            <summary>
            LIKE 子的的内容部份。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.LikeDescription.Match">
            <summary>
            获取或设置 LIKE 子句的匹配模式。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.LikeDescription.Not">
            <summary>
            对该表达式使用逻辑非运算
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.LikeDescription.op_BitwiseAnd(Wunion.DataAdapter.Kernel.CommandBuilders.LikeDescription,System.Object)">
            <summary>
            创建逻辑与运算表达式.
            </summary>
            <param name="left">左操作数对象.</param>
            <param name="right">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.LikeDescription.op_BitwiseOr(Wunion.DataAdapter.Kernel.CommandBuilders.LikeDescription,System.Object)">
            <summary>
            创建逻辑或运算表达式.
            </summary>
            <param name="left">左操作数对象.</param>
            <param name="right">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.exp">
            <summary>
            用于描述表达式信息的对象。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.exp.And">
            <summary>
            AND 运算符。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.exp.Or">
            <summary>
            OR 运算符。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.exp.NotEqual">
            <summary>
            不等于。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.exp.LessOrEqual">
            <summary>
            小于等于。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.exp.GreaterOrEqual">
            <summary>
            大于等于。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.exp.Create(System.Object[])">
            <summary>
            创建一个表达式描述。
            </summary>
            <param name="elements">表达式中的各个元素集合。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.exp.Like(Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription,System.Object,Wunion.DataAdapter.Kernel.CommandBuilders.LikeMatch)">
            <summary>
            创建一个 LIKE 子句描述。
            </summary>
            <param name="field">LIKE 子句中的字段。</param>
            <param name="content">LIKE 子句中的内容部分（请不要指定 ' 及 % 或 * 号之类的信息）。</param>
            <param name="match">匹配模式。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription">
            <summary>
            用于描述字段信息的对象类型。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription"/> 的对象实例。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription.TableName">
            <summary>
            获取或设置表名称或别名（多表查询时可需要）
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription.FieldName">
            <summary>
            获取或设置字段名称。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription.As(System.String)">
            <summary>
            将字段 As 为一个指定的名称。
            </summary>
            <param name="Name">欲 AS 为的别名。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription.op_Equality(Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription,System.Object)">
            <summary>
            创建等于运算表达式.
            </summary>
            <param name="field">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription.op_Inequality(Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription,System.Object)">
            <summary>
            创建不等于运算表达式.
            </summary>
            <param name="field">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription.op_GreaterThan(Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription,System.Object)">
            <summary>
            创建大于关系运算表达式.
            </summary>
            <param name="field">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription.op_GreaterThanOrEqual(Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription,System.Object)">
            <summary>
            创建大于等于关系运算表达式.
            </summary>
            <param name="field">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription.op_LessThan(Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription,System.Object)">
            <summary>
            创建小于关系运算表达式.
            </summary>
            <param name="field">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription.op_LessThanOrEqual(Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription,System.Object)">
            <summary>
            创建小于等于关系运算表达式.
            </summary>
            <param name="field">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription.op_Addition(Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription,System.Object)">
            <summary>
            创建加法运算表达式.
            </summary>
            <param name="field">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription.op_Subtraction(Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription,System.Object)">
            <summary>
            创建减法运算表达式.
            </summary>
            <param name="field">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription.op_Multiply(Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription,System.Object)">
            <summary>
            创建乘法运算表达式.
            </summary>
            <param name="field">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription.op_Division(Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription,System.Object)">
            <summary>
            创建除法运算表达式.
            </summary>
            <param name="field">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription.op_BitwiseAnd(Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription,System.Object)">
            <summary>
            创建逻辑与运算表达式.
            </summary>
            <param name="left">左操作数对象.</param>
            <param name="right">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription.op_BitwiseOr(Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription,System.Object)">
            <summary>
            创建逻辑或运算表达式.
            </summary>
            <param name="left">左操作数对象.</param>
            <param name="right">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.td">
            <summary>
            用于字段信息描述对象的快捷创建器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.td.Field(System.String)">
            <summary>
            创建一个字段信息描述对象。
            </summary>
            <param name="name">字段名称。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.td.Field(System.String,System.String)">
            <summary>
            创建一个字段信息描述对象。
            </summary>
            <param name="tbname">所属表的名称或别名（多表查询时需要）。</param>
            <param name="fieldname">字段名称。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.td.As(System.Object,System.String)">
            <summary>
            将指定的值在查询中 AS 为一个字段。
            </summary>
            <param name="value">值。</param>
            <param name="AsName">AS为的字段名称。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription">
            <summary>
            函数的描述对象类型。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription"/> 的对象实例。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription.Parameter">
            <summary>
            函数的参数。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription.FunctionName">
            <summary>
            函数名称。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription.As(System.String)">
            <summary>
            As 别名（如：SELECT [MONEY] / 1000 AS [K_MONEY] ....，中的 K_MONEY）。
            </summary>
            <param name="Name"></param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription.op_Equality(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Object)">
            <summary>
            创建等于运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription.op_Inequality(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Object)">
            <summary>
            创建不等于运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription.op_GreaterThan(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Object)">
            <summary>
            创建大于关系运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription.op_GreaterThanOrEqual(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Object)">
            <summary>
            创建大于等于关系运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription.op_LessThan(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Object)">
            <summary>
            创建小于关系运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription.op_LessThanOrEqual(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Object)">
            <summary>
            创建小于等于关系运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription.op_Addition(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Object)">
            <summary>
            创建加法运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription.op_Subtraction(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Object)">
            <summary>
            创建减法运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription.op_Multiply(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Object)">
            <summary>
            创建乘法运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription.op_Division(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Object)">
            <summary>
            创建除法运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription.op_BitwiseAnd(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Object)">
            <summary>
            创建逻辑与运算表达式.
            </summary>
            <param name="left">左操作数对象.</param>
            <param name="right">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription.op_BitwiseOr(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Object)">
            <summary>
            创建逻辑或运算表达式.
            </summary>
            <param name="left">左操作数对象.</param>
            <param name="right">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.DateInterval">
            <summary>
            表示日期部份的枚举。
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.Fun">
            <summary>
            函数描述对象的快捷创建器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.Fun.Distinct(Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription[])">
            <summary>
            去重复值的字段列表。
            </summary>
            <param name="parameter">字段列表（单个或多个字段，注：某些数据库可能不支持多字段去重复值）。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.Fun.Count(System.Object)">
            <summary>
            统计函数。
            </summary>
            <param name="parameter">函数参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.Fun.Sum(System.Object)">
            <summary>
            求和函数。
            </summary>
            <param name="parameter">函数参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.Fun.Avg(System.Object)">
            <summary>
            求平均值函数。
            </summary>
            <param name="parameter">函数参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.Fun.Max(System.Object)">
            <summary>
            最大值函数。
            </summary>
            <param name="parameter">函数参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.Fun.Min(System.Object)">
            <summary>
            最小值函数。
            </summary>
            <param name="parameter">函数参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.Fun.Now(System.Object)">
            <summary>
            获取当前日期时间函数。
            </summary>
            <param name="parameter">函数参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.Fun.DatePart(Wunion.DataAdapter.Kernel.CommandBuilders.DateInterval,System.Object)">
            <summary>
            返回给定日期整型部份的数据。
            </summary>
            <param name="interval">日期时间中对应的部份。
            <para>SQLite不支持此函数。</para>
            </param>
            <param name="thedate">日期时间。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.Fun.Len(System.Object)">
            <summary>
            获取长度函数。
            </summary>
            <param name="parameter">函数参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.Fun.Substring(System.Object,System.Int32,System.Int32)">
            <summary>
            字符串截取函数。
            </summary>
            <param name="str">要截取的字符串。</param>
            <param name="start">开始截取的位置。</param>
            <param name="length">截取数量。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.Fun.In(Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription,Wunion.DataAdapter.Kernel.CommandBuilders.IDescription)">
            <summary>
            IN 函数。
            </summary>
            <param name="field">字段信息。</param>
            <param name="select">嵌套子查询。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.Fun.In(Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription,System.Object[])">
            <summary>
            IN 函数。
            </summary>
            <param name="field">字段信息。</param>
            <param name="values">In函数的值。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.Fun.NotIn(Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription,Wunion.DataAdapter.Kernel.CommandBuilders.IDescription)">
            <summary>
            NOT IN 函数。
            </summary>
            <param name="field">字段信息。</param>
            <param name="select">嵌套子查询。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.Fun.NotIn(Wunion.DataAdapter.Kernel.CommandBuilders.FieldDescription,System.Object[])">
            <summary>
            NOT IN 函数。
            </summary>
            <param name="field">字段信息。</param>
            <param name="values">NOT IN 函数的值。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.Fun.IsNull(System.Object)">
            <summary>
            IS NULL 函数。
            </summary>
            <param name="parameter">参数（一般为字段信息）。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.Fun.IsNotNull(System.Object)">
            <summary>
            IS NOT NULL 函数。
            </summary>
            <param name="parameter">参数（一般为字段信息）。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.Fun.BetweenAnd(System.Object,System.Object,System.Object)">
            <summary>
            BETWEEN...AND 子句。
            </summary>
            <param name="fieldOrexp">字段信息或表达式。</param>
            <param name="start">开始值。</param>
            <param name="end">结束值。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.Fun.NotBetweenAnd(System.Object,System.Object,System.Object)">
            <summary>
            NOT BETWEEN...AND 子句。
            </summary>
            <param name="fieldOrexp">字段信息或表达式。</param>
            <param name="start">开始值。</param>
            <param name="end">结束值。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription">
            <summary>
            表示元素优先级分组（即命令中的括号分组）的描述对象.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription"/> 的对象实例.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription.#ctor(Wunion.DataAdapter.Kernel.CommandBuilders.IDescription)">
            <summary>
            创建一个元素优先级分组描述对象.
            </summary>
            <param name="element">该分组内包含的元素对象.</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription.Content">
            <summary>
            获取或设置分组内容元素对象.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription.Not">
            <summary>
            对该表分组使用逻辑非运算
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription.op_Equality(Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription,System.Object)">
            <summary>
            创建等于运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription.op_Inequality(Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription,System.Object)">
            <summary>
            创建不等于运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription.op_GreaterThan(Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription,System.Object)">
            <summary>
            创建大于关系运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription.op_GreaterThanOrEqual(Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription,System.Object)">
            <summary>
            创建大于等于关系运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription.op_LessThan(Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription,System.Object)">
            <summary>
            创建小于关系运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription.op_LessThanOrEqual(Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription,System.Object)">
            <summary>
            创建小于等于关系运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription.op_Addition(Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription,System.Object)">
            <summary>
            创建加法运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription.op_Subtraction(Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription,System.Object)">
            <summary>
            创建减法运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription.op_Multiply(Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription,System.Object)">
            <summary>
            创建乘法运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription.op_Division(Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription,System.Object)">
            <summary>
            创建除法运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription.op_BitwiseAnd(Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription,System.Object)">
            <summary>
            创建逻辑与运算表达式.
            </summary>
            <param name="left">左操作数对象.</param>
            <param name="right">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription.op_BitwiseOr(Wunion.DataAdapter.Kernel.CommandBuilders.GroupDescription,System.Object)">
            <summary>
            创建逻辑或运算表达式.
            </summary>
            <param name="left">左操作数对象.</param>
            <param name="right">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.LogicDescription">
            <summary>
            表示命令中的逻辑运算表达式描述对象.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.LogicDescription.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.LogicDescription"/> 的对象实例.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.LogicDescription.LeftElement">
            <summary>
            获取或设置逻辑运算的左操元素.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.LogicDescription.RightElement">
            <summary>
            获取或设置逻辑运算的右操作元素.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.LogicAndDescription">
            <summary>
            表示命令中的逻辑与运算表达式描述对象.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.LogicAndDescription.#ctor">
            <summary>
            创建一个逻辑与运算表达式描述对象的实例.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.LogicOrDescription">
            <summary>
            表示命令中的逻辑或运算表达式描述对象.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.LogicOrDescription.#ctor">
            <summary>
            创建一个逻辑或运算表达式描述对象的实例.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.LogicNotDescription">
            <summary>
            表示命令中的逻辑非运算表达式描述对象.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.LogicNotDescription.#ctor">
            <summary>
            创建一个逻辑非运算表达式描述对象的实例.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.LogicNotDescription.Expression">
            <summary>
            获取或设置要应用逻辑非运算的表达式.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.TableDescription">
            <summary>
            用于描述表对象的类型。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.TableDescription.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.TableDescription"/> 的对象实例。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.TableDescription.Name">
            <summary>
            获或设置表名称。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.TableDescription.Aliases">
            <summary>
            获取或设置表的别名（在查询时可能会用到）
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.LeftJoinDescription">
            <summary>
            用于描述一个 LEFT JOIN 子句的类型。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.LeftJoinDescription.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.LeftJoinDescription"/> 的对象实例。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.LeftJoinDescription.Table">
            <summary>
            获取或设置 LEFT JOIN 子句中的表信息。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.LeftJoinDescription.OnDescription">
            <summary>
            获取或设置 LEFT JOIN 子句中的 ON 条件段。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.LeftJoinDescription.ON(System.Object[])">
            <summary>
            添加 ON 子片段。
            </summary>
            <param name="Conditions">ON 条件片段。</param>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.fm">
            <summary>
            用于表或多表查询相关描述对象的快捷创建器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.fm.Table(System.String,System.String)">
            <summary>
            创建一个表信息描述对象。
            </summary>
            <param name="name">表名称。</param>
            <param name="aliases">表别名（可以没有）。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.fm.Table(System.String)">
            <summary>
            创建一个表信息描述对象。
            </summary>
            <param name="name">表名称。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.fm.LeftJoin(Wunion.DataAdapter.Kernel.CommandBuilders.TableDescription)">
            <summary>
            创建一个 LEFT JOIN 子句的信息描述对象。
            </summary>
            <param name="tab">LEFT JOIN 子句中的表。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.fm.LeftJoin(System.String,System.String)">
            <summary>
            创建一个 LEFT JOIN 子句的信息描述对象。
            </summary>
            <param name="name">表名称。</param>
            <param name="aliases">表别名（可以没有）。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.GenericDbType">
            <summary>
            表示通用数据库类型.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.GenericDbType.SmallInt">
            <summary>
            16 位整数类型.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.GenericDbType.Int">
            <summary>
            32 位整数类型.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.GenericDbType.BigInt">
            <summary>
            64 位整数类型.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.GenericDbType.Money">
            <summary>
            8 字节货币类型
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.GenericDbType.Single">
            <summary>
            32 位单精度浮点数.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.GenericDbType.Double">
            <summary>
            64 位双精度浮点数.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.GenericDbType.Char">
            <summary>
            定长字符.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.GenericDbType.VarChar">
            <summary>
            变长字符.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.GenericDbType.NChar">
            <summary>
            标准 Unicode 定长度符.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.GenericDbType.NVarchar">
            <summary>
            标准 Unicode 变长字符.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.GenericDbType.Text">
            <summary>
            超长文本类型.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.GenericDbType.NText">
            <summary>
            标准 Unicode 超长文本类型（使用 MySQL 时对应 longtext 类型）.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.GenericDbType.Boolean">
            <summary>
            布尔类型.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.GenericDbType.Binary">
            <summary>
            定长二进制数据（使用 MySQL 时对应 BLOB 类型）.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.GenericDbType.VarBinary">
            <summary>
            变长二进制数据（使用 MySQL 时对应 MEDIUMBLOB 类型）.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.GenericDbType.Image">
            <summary>
            大容量的二进制数据（使用 MySQL 时对应 LONGBLOB 类型）.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.GenericDbType.Time">
            <summary>
            日间类型通常用于一天内（不带时区，若在使用 SQLite 数据库时指定该类型将导致异常）.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.GenericDbType.Date">
            <summary>
            日期类型（不含日间）.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.CommandBuilders.GenericDbType.DateTime">
            <summary>
            日期时间类型.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.IDescription">
            <summary>
            表示命令或命令元素的描述对象基础类型接口。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.IDescription.DescriptionParserAdapter">
            <summary>
            获取或设置解释该对象的适配器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.IDescription.GetParser">
            <summary>
            获取用于解释该对象的解析器。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription">
            <summary>
            表示支持关系运算及逻辑运算的描述对象基础类型
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription"/> 的对象实例.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription.Group">
            <summary>
            创建运算的优先级分组.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription.In(Wunion.DataAdapter.Kernel.CommandBuilders.IDescription)">
            <summary>
            该达式的 IN 函数支持.
            </summary>
            <param name="select">IN 函数的条件查询.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription.In(System.Object[])">
            <summary>
            该达式的 IN 函数支持.
            </summary>
            <param name="values">IN 函数的条件值.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription.NotIn(Wunion.DataAdapter.Kernel.CommandBuilders.IDescription)">
            <summary>
            表达式的 NotIn 函数支持.
            </summary>
            <param name="select">条件查询.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription.NotIn(System.Object[])">
            <summary>
            表达式的 NotIn 函数支持.
            </summary>
            <param name="values"></param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription.IsNull">
            <summary>
            IS NULL 函数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription.IsNotNull">
            <summary>
            IS NOT NULL 函数。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription.Like(System.Object,Wunion.DataAdapter.Kernel.CommandBuilders.LikeMatch)">
            <summary>
            创建一个 LIKE 子句描述。
            </summary>
            <param name="content">LIKE 子句中的内容部分（请不要指定 ' 及 % 或 * 号之类的信息）。</param>
            <param name="match">匹配模式。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription.op_Equality(Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription,System.Object)">
            <summary>
            创建等于运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription.op_Inequality(Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription,System.Object)">
            <summary>
            创建不等于运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription.op_GreaterThan(Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription,System.Object)">
            <summary>
            创建大于关系运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription.op_GreaterThanOrEqual(Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription,System.Object)">
            <summary>
            创建大于等于关系运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription.op_LessThan(Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription,System.Object)">
            <summary>
            创建小于关系运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription.op_LessThanOrEqual(Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription,System.Object)">
            <summary>
            创建小于等于关系运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription.op_Addition(Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription,System.Object)">
            <summary>
            创建加法运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription.op_Subtraction(Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription,System.Object)">
            <summary>
            创建减法运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription.op_Multiply(Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription,System.Object)">
            <summary>
            创建乘法运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription.op_Division(Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription,System.Object)">
            <summary>
            创建除法运算表达式.
            </summary>
            <param name="item1">左操作数对象.</param>
            <param name="item2">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription.op_BitwiseAnd(Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription,System.Object)">
            <summary>
            创建逻辑与运算表达式.
            </summary>
            <param name="left">左操作数对象.</param>
            <param name="right">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription.op_BitwiseOr(Wunion.DataAdapter.Kernel.CommandBuilders.OperatorDescription,System.Object)">
            <summary>
            创建逻辑或运算表达式.
            </summary>
            <param name="left">左操作数对象.</param>
            <param name="right">右操作数对象.</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandBuilders.ParseDescription">
            <summary>
            可解释描述对象的基础类型。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.ParseDescription.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandBuilders.ParseDescription"/> 的对象实例.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandBuilders.ParseDescription.DescriptionParserAdapter">
            <summary>
            获取该对象的解释适配器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandBuilders.ParseDescription.GetParser">
            <summary>
            获取与该对象相关的解释器。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter">
            <summary>
            表示解释器适配器的基类型（它用于创建相应数据库对应的命令解释器）。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter"/> 的对象实例。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter.IdentityCommand">
            <summary>
            获取用于查询当前会话的最后一个自增长字段值的命令。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter.ElemIdentifierL">
            <summary>
            表示命令元素的防保留字冲突左括符（不同的数据库可能不一样，可由子类重写返回其相应符号）。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter.ElemIdentifierR">
            <summary>
            表示命令元素的防保留字冲突右括符（不同的数据库可能不一样，可由子类重写返回其相应符号）。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter.RegisterParser(System.Type,Wunion.DataAdapter.Kernel.CommandParser.ParserBase)">
            <summary>
            注册命令解释器.
            </summary>
            <param name="forDescription">解释器所针对的命令描述对象.</param>
            <param name="parser">注册该命令解释器的对象实例.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter.Get(System.Type)">
            <summary>
            获取指定的描述对象对应的解释器.
            </summary>
            <param name="forDescription">获取该类型对应的解释器.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter.InitializeParsers">
            <summary>
            初始化命令解释器.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter.GetParserByObject(Wunion.DataAdapter.Kernel.CommandBuilders.IDescription)">
            <summary>
            通过 Descript 对象获取其对应的解释器。
            </summary>
            <param name="desObj">命令描述对象。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter.CreateDbParameter(System.String,System.Object)">
            <summary>
            创建命令中的参数。
            </summary>
            <param name="parameterName">参数名称。</param>
            <param name="value">参数的值。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter.CreateDbParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            创建命令中的参数。
            </summary>
            <param name="parameterName">参数名称。</param>
            <param name="value">参数的值。</param>
            <param name="direction">获取或设置一个值，该值指示参数是只可输入、只可输出、双向还是存储过程返回值参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter.IdentityInsertCommand(System.String,System.Boolean)">
            <summary>
            返回开启或关闭指定表中自增长字段的命令文本。
            </summary>
            <param name="table">表名称。</param>
            <param name="enabled">开启为true，关闭则为false</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandParser.ParserBase">
            <summary>
            解释器的基础对象类型。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandParser.ParserBase.Description">
            <summary>
            获取或设置该解释器要解释的描述对象。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandParser.ParserBase.ElemIdentifierL">
            <summary>
            表示命令元素的防保留字冲突左括符（不同的数据库可能不一样，可由子类重写返回其相应符号）。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandParser.ParserBase.ElemIdentifierR">
            <summary>
            表示命令元素的防保留字冲突右括符（不同的数据库可能不一样，可由子类重写返回其相应符号）。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.ParserBase.#ctor(Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            创建一个命令元素解释器实例。
            </summary>
            <param name="adapter">其父级管理适配器。</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandParser.ParserBase.Adapter">
            <summary>
            获取其父级适配器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.ParserBase.Parsing(System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            解释 Description 对象。
            </summary>
            <param name="DbParameters">在解释过程中可能会产生的 DbParameter 参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.ParserBase.AddDbParameter(System.Collections.Generic.List{System.Data.IDbDataParameter}@,System.Data.IDbDataParameter)">
            <summary>
            向 DbParameters 参数列表中添加一个参数（用该方法添加参数会自动检测重名的参数并为此参数重新命名）。
            </summary>
            <param name="DbParameters">在解释过程中可能会产生的 DbParameter 参数。</param>
            <param name="Parameter">要添加的新参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.ParserBase.IsNull(System.Object)">
            <summary>
            判断指定的对象是否为空。
            </summary>
            <param name="value">要判断的对象。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandParser.AsElementParser">
            <summary>
            As别名元素解释器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.AsElementParser.#ctor(Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            实例化一个字段描述信息解释器。
            </summary>
            <param name="adapter">所属的父级适配器。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.AsElementParser.Parsing(System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            解释整个表达式信息。
            </summary>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandParser.DeleteBlockParser">
            <summary>
            DELETE 语句解释器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.DeleteBlockParser.#ctor(Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            实例化一个DELETE 语句解释器。
            </summary>
            <param name="adapter">所属的父级适配器。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.DeleteBlockParser.Parsing(System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            解释 DELETE 命令。
            </summary>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandParser.ExpParser">
            <summary>
            表达式描述信息解释器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.ExpParser.#ctor(Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            实例化一个表达式描述信息解释器。
            </summary>
            <param name="adapter">所属的父级适配器。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.ExpParser.ParsingOperChar(System.Char,System.Boolean@)">
            <summary>
            解释单字符所表示的含义（主要用于运算符处理）。
            </summary>
            <param name="oper">可能表示运算符的字符信息。</param>
            <param name="createParameter">返回是否需要创建参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.ExpParser.Parsing(System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            解释整个表达式信息。
            </summary>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandParser.FieldParser">
            <summary>
            字段元素的解释器（通用实现，部份数据库可能会出差距题，可参照此方式实现）。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.FieldParser.#ctor(Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            实例化一个字段描述信息解释器。
            </summary>
            <param name="adapter">所属的父级适配器。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.FieldParser.Parsing(System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            解释 Description 对象。
            </summary>
            <param name="DbParameters">在解释过程中可能会产生的 DbParameter 参数。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandParser.FromBlockParser">
            <summary>
            FROM 子句的解释器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.FromBlockParser.#ctor(Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            实例化一个 FROM 子句解释器。
            </summary>
            <param name="adapter">所属的父级适配器。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.FromBlockParser.Parsing(System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            解释 FROM 子句。
            </summary>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandParser.FunParser">
            <summary>
            内置函数解析器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.FunParser.DistinctParsing(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            Distinct 去重复值函数解释。
            </summary>
            <param name="D">FunDescription 对象。</param>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.FunParser.CountParsing(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            Count 函数解释。
            </summary>
            <param name="D">FunDescription 对象。</param>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.FunParser.SumParsing(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            Sum 函数解释。
            </summary>
            <param name="D">FunDescription 对象。</param>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.FunParser.AvgParsing(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            Avg 函数解释。
            </summary>
            <param name="D">FunDescription 对象。</param>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.FunParser.MaxParsing(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            Max 函数解释。
            </summary>
            <param name="D">FunDescription 对象。</param>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.FunParser.MinParsing(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            Min 函数解释。
            </summary>
            <param name="D">FunDescription 对象。</param>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.FunParser.NowParsing(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            Now 函数解释。
            </summary>
            <param name="D">FunDescription 对象。</param>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.FunParser.LenParsing(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            Len 函数解释。
            </summary>
            <param name="D">FunDescription 对象。</param>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.FunParser.InParsing(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            In 函数解释。
            </summary>
            <param name="D">FunDescription 对象。</param>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.FunParser.NotInParsing(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            NotIn 函数解释。
            </summary>
            <param name="D">FunDescription 对象。</param>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.FunParser.IsNullParsing(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            IsNull 函数解释。
            </summary>
            <param name="D">FunDescription 对象。</param>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.FunParser.IsNotNullParsing(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            IsNotNull 函数解释。
            </summary>
            <param name="D">FunDescription 对象。</param>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.FunParser.BetweenAndParsing(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            BetweenAnd 函数解释。
            </summary>
            <param name="D">FunDescription 对象。</param>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.FunParser.NotBetweenAndParsing(Wunion.DataAdapter.Kernel.CommandBuilders.FunDescription,System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            NotBetweenAnd 函数解释。
            </summary>
            <param name="D">FunDescription 对象。</param>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.FunParser.Parsing(System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            解释当前的函数语句。
            </summary>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandParser.GroupByBlockParser">
            <summary>
            GROUP BY 子句解释器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.GroupByBlockParser.#ctor(Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            实例化一个 GROUP BY 子解释器
            </summary>
            <param name="adapter"></param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.GroupByBlockParser.Parsing(System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            解释 GROUP BY 子句。
            </summary>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandParser.GroupElementParser">
            <summary>
            元素优先级分组（即命令中的括号分组）的解释器.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.GroupElementParser.#ctor(Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            创建一个元素优先级分组（即命令中的括号分组）的解释器对象实例.
            </summary>
            <param name="adapter">所属的父级适配器。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.GroupElementParser.Parsing(System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            解释元素优先级分组.
            </summary>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandParser.InsertBlockParser">
            <summary>
            INSERT 语句解释器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.InsertBlockParser.#ctor(Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            创建一个 INSERT 语句解释器。
            </summary>
            <param name="adapter">所属的父级适配器。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.InsertBlockParser.ParsingValueItem(System.String,System.Object,System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            解释 VALUES 子句中的值元素。
            </summary>
            <param name="field">与该值对应的字段。</param>
            <param name="v">值。</param>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.InsertBlockParser.Parsing(System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            解释 INSERT 语句。
            </summary>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandParser.LeftJoinParser">
            <summary>
            LEFT JOIN 子句解释器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.LeftJoinParser.#ctor(Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            实例化一个 LEFT JOIN 子句解释器。
            </summary>
            <param name="adapter">该解释器所属的适配器。</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandParser.LeftJoinParser.KeywordsAnd">
            <summary>
            返回连接多个 ON 条件的与运算.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.LeftJoinParser.Parsing(System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            解释 LEFT JOIN 子句。
            </summary>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandParser.LikeParser">
            <summary>
            LIKE 子句解释器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.LikeParser.#ctor(Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            实例化一个LIKE 子句解释器。
            </summary>
            <param name="adapter">所属的父级适配器。</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.CommandParser.LikeParser.MatchChar">
            <summary>
            获取配置符（不同的数据库类型需子类重写）。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.LikeParser.FormatKeywords(System.Object)">
            <summary>
            格式化关键字的内容.
            </summary>
            <param name="content">原始关键字内容.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.LikeParser.Parsing(System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            解释 LIKE 子句。
            </summary>
            <param name="DbParameters">在解释过程中可能会产生的 DbParameter 参数。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandParser.LogicParser">
            <summary>
            表示逻辑运算表达式的解释器.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.LogicParser.#ctor(Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            创建一个逻辑运算表达式的解释器对象实例.
            </summary>
            <param name="adapter">所属的父级适配器。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.LogicParser.ParseElementObject(System.Collections.Generic.List{System.Data.IDbDataParameter}@,System.Object)">
            <summary>
            解释逻辑运算的操作元素.
            </summary>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <param name="elemObject">左或右操作元素对象.</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandParser.LogicAndParser">
            <summary>
            逻辑与运算表达式的解释器（一般通用）.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.LogicAndParser.#ctor(Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            实例化一个逻辑与运算表达式解释器
            </summary>
            <param name="adapter">所属的父级适配器。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.LogicAndParser.Parsing(System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            解释逻辑与运算表达式.
            </summary>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandParser.LogicOrParser">
            <summary>
            逻辑或运算表达式的解释器（一般通用）.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.LogicOrParser.#ctor(Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            创建一个逻辑或运算表达式的解释器对象实例.
            </summary>
            <param name="adapter">所属的父级适配器。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.LogicOrParser.Parsing(System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            解释逻辑或运算表达式.
            </summary>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandParser.LogicNotParser">
            <summary>
            逻辑非运算表达式的解释器（一般通用）.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.LogicNotParser.#ctor(Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            创建一个逻辑非运算表达式的解释器对象实例.
            </summary>
            <param name="adapter">所属的父级适配器。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.LogicNotParser.Parsing(System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            解释逻辑非运算表达式.
            </summary>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandParser.OrderByBlockParser">
            <summary>
            ORDER BY 子句解释器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.OrderByBlockParser.#ctor(Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            创建一个 ORDER BY 子句解释器实例。
            </summary>
            <param name="adapter">所属的父级适配器。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.OrderByBlockParser.Parsing(System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            解释 ORDER BY 子句。
            </summary>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandParser.SelectBlockParser">
            <summary>
            SELECT 语句解释器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.SelectBlockParser.#ctor(Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            实例化一个 SELECT 语句解释器。
            </summary>
            <param name="adapter">所属的父级适配器。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.SelectBlockParser.ParsingWithNotPage(Wunion.DataAdapter.Kernel.CommandBuilders.SelectBlock,System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            按不分页的方式解释 SELECT 命令。
            </summary>
            <param name="sBlock">SelectBlock对象。</param>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.SelectBlockParser.ParsingWithPage(Wunion.DataAdapter.Kernel.CommandBuilders.SelectBlock,System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            按分页的方式解释 SELECT 命令。
            </summary>
            <param name="sBlock">SelectBlock对象。</param>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.SelectBlockParser.Parsing(System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            解释 SELECT 命令。
            </summary>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandParser.SetBlockParser">
            <summary>
            SET 子句解释器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.SetBlockParser.#ctor(Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            实例化一个 SET 子句解释器。
            </summary>
            <param name="adapter">所属的父级适配器。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.SetBlockParser.Parsing(System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            解释 SET 子句。
            </summary>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandParser.TableParser">
            <summary>
            表元素的解释器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.TableParser.#ctor(Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            创建一个表元素解释器的实例。
            </summary>
            <param name="adapter">该解释器所属的适配器。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.TableParser.Parsing(System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            表元素解释器。
            </summary>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandParser.UpdateBlockParser">
            <summary>
            UPDATE 语句解释器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.UpdateBlockParser.#ctor(Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            实例化一个 UPDATE 语句解释器。
            </summary>
            <param name="adapter">所属的父级适配器。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.UpdateBlockParser.Parsing(System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            解释 UPDATE 命令。
            </summary>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.CommandParser.WhereBlockParser">
            <summary>
            WHERE 子句的解释器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.WhereBlockParser.#ctor(Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            实例化一个 WHERE 子句解释器。
            </summary>
            <param name="adapter">所属的父级适配器。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.CommandParser.WhereBlockParser.Parsing(System.Collections.Generic.List{System.Data.IDbDataParameter}@)">
            <summary>
            解释 WHERE 子句。
            </summary>
            <param name="DbParameters">用于缓存在解释过程中可能会产生的参数。</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity">
            <summary>
            表示动态数据实体对象类型.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.#ctor(System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity"/> 的对象实例.
            </summary>
        </member>
        <member name="E:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.PropertyChanged">
            <summary>
            用于通知属性值改变的事件.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.Keys">
            <summary>
            获取动态实体的所有键名称.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.Values">
            <summary>
            获取动态实体的所有值.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.Count">
            <summary>
            获以动态实体的属性成员数量.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.IsReadOnly">
            <summary>
            获取或设置是否为只读（未使用）.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.Item(System.String)">
            <summary>
            用于获取动态实体中指定键的值的索引器.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.SetPropertyValue(System.String,System.Object,System.Type)">
            <summary>
            设置动态属性.
            </summary>
            <param name="name">属性的名称.</param>
            <param name="value">属性值.</param>
            <param name="valueType">属性的数据类型.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.GetPropertyValue(System.String,System.Object)">
            <summary>
            获取指定的属性值.
            </summary>
            <typeparam name="T">属性值类型名称.</typeparam>
            <param name="name">属性名称.</param>
            <param name="defaultValue">当未找到该属性时返回的默认值.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.TryGetMember(System.Dynamic.GetMemberBinder,System.Object@)">
            <summary>
            获取指定的成员值.
            </summary>
            <param name="binder"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.TrySetMember(System.Dynamic.SetMemberBinder,System.Object)">
            <summary>
            设置指定成员的值。
            </summary>
            <param name="binder"></param>
            <param name="value"></param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.TryInvokeMember(System.Dynamic.InvokeMemberBinder,System.Object[],System.Object@)">
            <summary>
            调用指定的方法.
            </summary>
            <param name="binder"></param>
            <param name="args"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.ToDictionary(System.String[])">
            <summary>
            将实体输出为字典.
            </summary>
            <param name="withOuts">不包含在输出字典中的实体属性名称.</param>
            <returns>返回一个包含实体数据的字典.</returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.Add(System.String,System.Object)">
            <summary>
            添加值.
            </summary>
            <param name="key"></param>
            <param name="value"></param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.ContainsKey(System.String)">
            <summary>
            指定的键在动态实体中存在则返回 true， 否则返回 false.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.Remove(System.String)">
            <summary>
            从动态实体中删除具有指定键名称（即属性名称）的成员.
            </summary>
            <param name="key"></param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.TryGetValue(System.String,System.Object@)">
            <summary>
            获取与指定键关联的值.
            </summary>
            <param name="key">用于获取值的键.</param>
            <param name="value">用于输出值的缓冲区.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.Add(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            向动态实体中添加一个键值对作为新成员.
            </summary>
            <param name="item">包含新成员键值对的对象.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.Clear">
            <summary>
            清除动态实体中的所有成员.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.Contains(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            当指点定的键值对在动态实体中存在时返回 true，否则返回 false.
            </summary>
            <param name="item">包含成员键值对信息的对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.CopyTo(System.Collections.Generic.KeyValuePair{System.String,System.Object}[],System.Int32)">
            <summary>
            将动态实体的所有成员信息复制到给定的键值对对象数组中.
            </summary>
            <param name="array">所有成员复制到该键值对对象数.</param>
            <param name="arrayIndex">从数组开始复制的从零开始的索引.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.Remove(System.Collections.Generic.KeyValuePair{System.String,System.Object})">
            <summary>
            从动态实体中删除指定键值对信息的成员.
            </summary>
            <param name="item">要删除的成员键值对信息.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.GetEnumerator">
            <summary>
            返回一个实体对象的遍历迭代器.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.System#Collections#IEnumerable#GetEnumerator">
            <summary>
            返回一个实体对象的遍历迭代器.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.Clone">
            <summary>
            克隆一个动态实体的对象副本.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.OnPropertyChanged(System.String)">
            <summary>
            用于触发 <see cref="E:Wunion.DataAdapter.Kernel.DataCollection.DynamicEntity.PropertyChanged"/> 事件.
            </summary>
            <param name="name">被更新的属性的名称.</param>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumn">
            <summary>
            表示数据列的对象类型。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumn.Name">
            <summary>
            获取或设置列名称。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumn.Index">
            <summary>
            获取或设置该列的索引。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumn.DataType">
            <summary>
            获取或设置该列的数据类型。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumn.DefaultValue">
            <summary>
            获取或设置默认值。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumn.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumn"/> 的对象实例。
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumnCollection">
            <summary>
            表示 <see cref="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable"/> 的数据列集合。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumnCollection.#ctor(Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumnCollection"/> 的对象实例。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumnCollection.Table">
            <summary>
            获取该列集合所属的表。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumnCollection.Count">
            <summary>
            获取集合中的列数量。
            </summary>
        </member>
        <member name="E:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumnCollection.DataColumnAdded">
            <summary>
            当数据列被添加到集合时触发。
            </summary>
        </member>
        <member name="E:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumnCollection.DataColumnRemoved">
            <summary>
            当数据列被从集合中删除时触发。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumnCollection.Item(System.Int32)">
            <summary>
            获取或设置指定索引的列。
            </summary>
            <param name="index">索引。</param>
            <returns></returns>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumnCollection.Item(System.String)">
            <summary>
            获取具有指定名称的列对象。
            </summary>
            <param name="Name">列名称。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumnCollection.OnDataColumnAdded(Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumn)">
            <summary>
            用于触发 DataColumnAdded 事件。
            </summary>
            <param name="Column">与 DataColumnAdded 事件相关的数据列对象。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumnCollection.OnDataColumnRemoved(System.Int32)">
            <summary>
            用于触发 DataColumnsRemoved 事件。
            </summary>
            <param name="Index">被删除的列索引。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumnCollection.Add(Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumn)">
            <summary>
            添加一个新列到集合结尾。
            </summary>
            <param name="item">新的列对象。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumnCollection.Insert(System.Int32,Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumn)">
            <summary>
            在集合中的指定位置插入一个新的元素。
            </summary>
            <param name="index">在该索引处插入元素。</param>
            <param name="item">新插入的元素对象。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumnCollection.Add(System.String,System.Type,System.Object)">
            <summary>
            添加一个数据列。
            </summary>
            <param name="Name">列名称。</param>
            <param name="DataType">该列的数据类型。</param>
            <param name="defaultValue">该列的默认值。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumnCollection.RearrangeColumnIndex(System.Int32)">
            <summary>
            重新整理各个列的索引。
            </summary>
            <param name="beginIndex">从该索引处开始向后整理。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumnCollection.Remove(Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumn)">
            <summary>
            从集合中移除一个元素。
            </summary>
            <param name="item">要移除的元素。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumnCollection.RemoveAt(System.Int32)">
            <summary>
            从集合中删除指定索引处的元素。
            </summary>
            <param name="index">删除该索引处的元素。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumnCollection.Clear">
            <summary>
            清除集合内的所有列。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumnCollection.GetEnumerator">
            <summary>
            返回一个遍历所有列的迭代器。
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.DataCollection.DataColumnCollectionEventHandler">
            <summary>
            用于执行数据列触发事件的委托。
            </summary>
            <param name="sender">触发事件的对象。</param>
            <param name="Column">与事件相关的数据列对象。</param>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.DataCollection.DataColumnRemovedEventHandler">
            <summary>
            用于执行数据列删除后触发事件的委托。
            </summary>
            <param name="sender">触发事件的对象。</param>
            <param name="Index">被删除的列索引。</param>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataProperty">
            <summary>
            提供 <see cref="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow"/> 类上的属性的抽象化实现。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataProperty.#ctor(Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumn,System.Attribute[])">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataProperty"/> 的对象实例。
            </summary>
            <param name="column">属性的名称。</param>
            <param name="attributes">包含属性特性的类型 System.Attribute 的数组。</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataProperty.ComponentType">
            <summary>
            获取该属性绑定到的组件的类型。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataProperty.IsReadOnly">
            <summary>
            获取该属性是否为只读。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataProperty.PropertyType">
            <summary>
            获取该属性的值类型。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataProperty.CanResetValue(System.Object)">
            <summary>
            获取是否允许重置值。
            </summary>
            <param name="component">该属性绑定到的组件对象（为 <see cref="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow"/>对象）。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataProperty.GetValue(System.Object)">
            <summary>
            获取该属性的值。
            </summary>
            <param name="component">该属性绑定到的组件对象（为 <see cref="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow"/>对象）。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataProperty.ResetValue(System.Object)">
            <summary>
            重置该属性的值。
            </summary>
            <param name="component">该属性绑定到的组件对象（为 <see cref="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow"/>对象）。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataProperty.SetValue(System.Object,System.Object)">
            <summary>
            设置该属性的值。
            </summary>
            <param name="component">该属性绑定到的组件对象（为 <see cref="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow"/>对象）。</param>
            <param name="value">值。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataProperty.ShouldSerializeValue(System.Object)">
            <summary>
            返回是否需要永久保存该属性的值。
            </summary>
            <param name="component">该属性绑定到的组件对象（为 <see cref="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow"/>对象）。</param>
            <returns></returns>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataProperty.IsBrowsable">
            <summary>
            获取该成员是否可浏览。
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow">
            <summary>
            表示数据行的对象。
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.DataCell">
            <summary>
            表示数据单元格。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.DataCell.Column">
            <summary>
            获取或设置该数据单元格所属的列。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.DataCell.Value">
            <summary>
            获取或设置该单元格的值。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.DataCell.#ctor">
            <summary>
            创建一个数据单元格。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.DataCell.#ctor(Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumn,System.Object)">
            <summary>
            创建一个数据单元格。
            </summary>
            <param name="OwnerColumn">所属的列。</param>
            <param name="Val">值。</param>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.DataCells">
            <summary>
            表示数据字段单元格的集合。
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.CellAddressHashTable">
            <summary>
            表示字段的名称寻址映射 Hash 表（提高通过字段名读取或设置值时的寻址效率）。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow"/> 对象的实例。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.#ctor(Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow"/> 对象的实例。
            </summary>
            <param name="table">该行所属的 <see cref="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable"/> 表对象。</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.Table">
            <summary>
            获取或设置该行所属的 <see cref="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable"/> 表对象。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.Item(System.Int32)">
            <summary>
            获了或设置指定列索引处的值。
            </summary>
            <param name="index">列索引。</param>
            <returns></returns>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.Item(System.String)">
            <summary>
            获取该行上指定列的数据。
            </summary>
            <param name="ColumnName">列名称。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.FindCell(System.String)">
            <summary>
            查找指定列所属的数据单元格对象。
            </summary>
            <param name="ColumnName">列名称。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.CreateNewCell(Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumn)">
            <summary>
            为新列创建一个数据单元格（此方法不可让外部程序集使用）。
            </summary>
            <param name="Column">数据新单元格所属的列。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.RemoveCell(System.Int32)">
            <summary>
            删除指定索引处的数据单元格（此方法不可让外部程序集使用）。
            </summary>
            <param name="Index">要删除的单元格索引。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.Add(Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumn,System.Object)">
            <summary>
            向数据行中添加一个数据单元格。
            </summary>
            <param name="Column">该数据单元格所属的列对象。</param>
            <param name="Value"></param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.Field``1(System.Int32)">
            <summary>
            获取该行指定字段的值。
            </summary>
            <typeparam name="T">返回的数据类型。</typeparam>
            <param name="index">列索引。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.Field``1(System.String)">
            <summary>
            获取该行指定字段的值。
            </summary>
            <typeparam name="T">返回的数据类型。</typeparam>
            <param name="ColumnName">列名称。</param>
            <returns></returns>
        </member>
        <member name="E:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.PropertyChanged">
            <summary>
            在更改属性值时发生。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.OnPropertyChanged(System.String)">
            <summary>
            用于触发 PropertyChanged 事件。
            </summary>
            <param name="propertyName"></param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.GetAttributes">
            <summary>
            返回该对象的特性集合。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.GetClassName">
            <summary>
            返回该对象的完整类名称。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.GetComponentName">
            <summary>
            返回该对象的组件名称。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.GetConverter">
            <summary>
            返回该对象的类型转换器。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.GetDefaultEvent">
            <summary>
            返回该对象的默认事件。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.GetDefaultProperty">
            <summary>
            返回该对象的默认属性。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.GetEditor(System.Type)">
            <summary>
            返回该对象的类型编辑器。
            </summary>
            <param name="editorBaseType"></param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.GetEvents">
            <summary>
            返回所有事件。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.GetEvents(System.Attribute[])">
            <summary>
            返回所有与特性相关的事件。
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.GetProperties">
            <summary>
            返回该对象的所有抽象化属性集合。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.GetProperties(System.Attribute[])">
            <summary>
            返回该对象的所有抽象化属性集合。
            </summary>
            <param name="attributes"></param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow.GetPropertyOwner(System.ComponentModel.PropertyDescriptor)">
            <summary>
            获取属性的所有者对象。
            </summary>
            <param name="pd"></param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable">
            <summary>
            极速数据表集合对象。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable"/> 的对象实例。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable.#ctor(System.String)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable"/> 的对象实例。
            </summary>
            <param name="tabName"></param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable.TableName">
            <summary>
            获取或设置表名称。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable.Columns">
            <summary>
            获取该表的数据列对象。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable.Initialize">
            <summary>
            初化 <see cref="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable"/> 对象。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable.DataColumns_DataColumnAdded(Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable,Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumn)">
            <summary>
            当在数据列集合中添加一个新列时要进行的处理。
            </summary>
            <param name="sender">触发事件的表。</param>
            <param name="Column">被添加的数据列对象。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable.DataColumns_DataColumnRemoved(Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable,System.Int32)">
            <summary>
            当某个列被从集合中删除时要进行的处理。
            </summary>
            <param name="sender">>触发事件的表。</param>
            <param name="Index">被删除的列索引。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable.Select(System.Func{Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow,System.Boolean})">
            <summary>
            对该表进行条件筛选，返回一个新的集合（该集合亦可作为绑定源）。
            </summary>
            <param name="Filter">用于筛选的 Lambda 表达式。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable.GetFieldNullValue(Wunion.DataAdapter.Kernel.DataCollection.SpeedDataColumn)">
            <summary>
            返回指定字段为空时默认值
            </summary>
            <param name="Column">该字段的列对象。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable.FormatFieldValue(System.Object)">
            <summary>
            格式化字段值。
            </summary>
            <param name="val"></param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable.SerializeJson">
            <summary>
            将数据集序列化为 JSON 文本。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable.SerializeJson(Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow)">
            <summary>
            将指定的行序列化为 JSON 文本。
            </summary>
            <param name="Row">要序列化的数据行。</param>
            <returns></returns>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable.IsDisposed">
            <summary>
            指示对象是否已被释放。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable.Dispose(System.Boolean)">
            <summary>
            释放 <see cref="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable"/> 对象所占用的资源。
            </summary>
            <param name="disposing">手动调用则为 true，由对象终结器调用时为 false</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable.Dispose">
            <summary>
            释放 <see cref="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable"/> 对象所占用的资源。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable.Finalize">
            <summary>
            <see cref="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable"/> 的对象终结器。
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.DataEngine">
            <summary>
            用于执行数据交互命令的引擎对象。
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.DataEngine.ConverterOptions">
            <summary>
            用于存储数据库值的转换器支持.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataEngine.#ctor(Wunion.DataAdapter.Kernel.DbInterop.DbAccess,Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.DataEngine"/> 的对象实例。
            </summary>
            <param name="dba">该引擎使用的数据访问器。</param>
            <param name="parserAdapter">解释命令时使用的适配器。</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataEngine.DBA">
            <summary>
            获取或设置该引擎实例所使用的数据交互访问器对象。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataEngine.CommandParserAdapter">
            <summary>
            获取该引擎解释命令所需要的解释适配器。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataEngine.DbConversionPool">
            <summary>
            实体对象的数据映射缓存池.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataEngine.UseConnectionPool(Wunion.DataAdapter.Kernel.IDbConnectionPool)">
            <summary>
            为该数据库引擎对象配置并使用您自己实现的连接池.
            </summary>
            <param name="connectionPool">连接池的对象实例.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataEngine.UseDefaultConnectionPool(System.Action{Wunion.DataAdapter.Kernel.IDbConnectionPool})">
            <summary>
            为该数据库引擎对象配置并使用内置的默认连接池.
            </summary>
            <param name="configure">用于配置连接池的方法.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataEngine.ConfigureValueConverter(System.Action{Wunion.DataAdapter.Kernel.DbValueConverterOptions})">
            <summary>
            配置该数据库引擎实例在执行查询时要使用的值转换器.
            </summary>
            <param name="configure">用于配置值转换器选项的方法.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataEngine.ConfigureValueConverter(Wunion.DataAdapter.Kernel.DbValueConverterOptions)">
            <summary>
            将默认的数据库值转换器配置为指定的转换器设置.
            </summary>
            <param name="options">新的数据库值转换器设置.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataEngine.GetValueConverter(System.Type)">
            <summary>
            获取指定类型的值在该数据库引擎中配置的转换器.
            </summary>
            <param name="type">转换器的作用数据类库.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataEngine.ExecuteNoneQuery(Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder)">
            <summary>
            执行指定的 SQL 命令，并返回受影响的记录数。
            </summary>
            <param name="Command">CommandBuilder对象。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataEngine.QueryDataTable(Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder)">
            <summary>
            执行指定的查询命令，并返回数据集。
            </summary>
            <param name="Command">CommandBuilder对象。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataEngine.ExecuteQuery(Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder)">
            <summary>
            执行指定的查询命令，并返回 <see cref="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable"/> 数据集。
            </summary>
            <typeparam name="T"><see cref="T:Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable"/>类型参数。</typeparam>
            <param name="Command">CommandBuilder对象。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataEngine.ExecuteDynamicEntity(Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder)">
            <summary>
            执行指定的查询，并返回该查询对应的动态实体对象数据集合.
            </summary>
            <param name="Command">要执行的查询命令对象.</param>
            <exception cref="T:System.Exception">在查询过程中产生错误时引发此异常.</exception>
            <returns>查询对应的动态实体对象数据集合.</returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataEngine.ExecuteReader(Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder)">
            <summary>
            执行指定的查询命令，并返回相应的数据读取器。
            </summary>
            <param name="Command">CommandBuilder对象。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataEngine.ExecuteScalar(Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。所有其他的列和行将被忽略。
            </summary>
            <param name="Command">CommandBuilder对象。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataEngine.BeginTrans(System.Nullable{System.Data.IsolationLevel},System.Int32)">
            <summary>
            开启事务处理。
            </summary>
            <param name="il">事务锁定行为（即隔离级别）.</param>
            <param name="commandTimeout">事务执行命令的超时时间.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataEngine.ReleaseTransaction(Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController)">
            <summary>
            释放与事务相关的资源（包含数据连接）。
            </summary>
            <param name="Owner">事务的所有者。</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataEngine.CurrentEngine">
            <summary>
            获取或设置当前的数据交互引擎对象。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataEngine.CurrentEngineStatus">
            <summary>
            获取一个值，该值指示当前引擎的状态。（该属性用于检查当前引擎是否是默认的引擎，如果不是则可通过调用 EndChange() 方法来回到默认引擎上）。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataEngine.AppendDataEngine(Wunion.DataAdapter.Kernel.DbInterop.DbAccess,Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter,System.String)">
            <summary>
            向引擎池中添加一个引擎(注：需要在组件的支持范围内)。
            </summary>        
            <param name="Dba">该引擎与数据库进行交互的访问器。</param>
            <param name="parserAdapter">该引擎用的解析命令的适配器。</param>
            <param name="key">该引擎在引擎池中的键名称。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataEngine.EnginePoolsClean">
            <summary>
            清理引擎池中，除默认引擎外的所有其他引擎。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataEngine.RemoveEngine(System.String)">
            <summary>
            从引擎池中移除指定的绵里藏针。
            </summary>
            <param name="database">引擎在池内对应的数据库类型名称“键”。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataEngine.ChangeEngine(System.String)">
            <summary>
            使当前引擎切换到指定的数据库引擎，成功则返回 DataEngine.ENGINE_CHANGE_OK 常量。当在一个程序中需要访问多种数据库时，使用引擎池来实现。随时可以使用该方法
            将当前引擎切换到其它数据库引擎上，并在使用完成后调用 EndChange() 方法撤销切换。
            </summary>
            <param name="database">要切换到的数据库交互引擎在引擎池中的键名称。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataEngine.GetEngine(System.String)">
            <summary>
            从数据库引擎池中获取指定键的引擎对象。
            </summary>
            <param name="key">引擎实例在池中的键名称。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataEngine.EndChange">
            <summary>
            撤销 ChangeEngine 方法对当前引擎所做的切换操作。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataEngine.CreateConverterOptions">
            <summary>
            创建数据库的值类型转换器.
            </summary>
            <returns></returns>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.DataEngine.ENGINE_NOT_INSTANCE">
            <summary>
            引擎尚未创建。
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.DataEngine.ENGINE_POOLS_IS_EMPTY">
            <summary>
            引擎池是空的。
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.DataEngine.ENGINE_IS_NOT_DEFAULT">
            <summary>
            表示当前引擎已不是默认引擎。
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.DataEngine.ENGINE_IS_DEFAULT">
            <summary>
            表示当前引擎是默认引擎。
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.DataEngine.ENGINE_CHANGE_OK">
            <summary>
            当前引擎已顺利切换。
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.DbError">
            <summary>
            追踪执行错误的错误信息对象类型。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbError.#ctor(System.String,System.String,System.String)">
            <summary>
            创建一个 <see cref="!:Wunion.DBAccess.ErrorInfo"/> 的对象实例。
            </summary>
            <param name="msg">错误信息。</param>
            <param name="command">引发错误的 SQL 命令原型。</param>
            <param name="conn">引发错误的连接信息。</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbError.Message">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbError.CommandText">
            <summary>
            获取引发错误的 SQL 命令原型。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbError.ConnectionString">
            <summary>
            获取引发错误的连接信息。
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.DbInterop.DbAccess">
            <summary>
            与目录数据库交互的数据访问器基础对象类型。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.#ctor">
            <summary>
            创建对象实例。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.ConnectionString">
            <summary>
            获取或设置数据库连接字符串。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.ConnectionPool">
            <summary>
            表示数据库连接池.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.parserAdapter">
            <summary>
            获取或设置解释命令所需要的适配器。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.Error">
            <summary>
            获取错误信息。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.IdentityCommand">
            <summary>
            获取用于取得当前会话的最后一个自增长字段值的命令。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.SCOPE_IDENTITY">
            <summary>
            获取插入到当前会话的最后一个自增长字段的值。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.ConnectionPoolAvailable">
            <summary>
            连接池可时返回 true，否则返回 false.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.CreateConnection">
            <summary>
            用于创建数据库连接.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.Connect">
            <summary>
            连接数据库，并返回一个 DbConnection 对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.CreateDbCommand">
            <summary>
            创建要对数据库执行 SQL 命令或存储过程的对象。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.QueryLastIdentity(System.Data.IDbCommand)">
            <summary>
            必须在所有SQL命令执行完成后并且数据库连接关闭前调用。
            </summary>
            <param name="DbCommand">会话的 SqlCommand 对象。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.IdentityInsert(System.String,System.Boolean)">
            <summary>
            开启或关闭指定表中自增长字段值的插入操作。
            </summary>
            <param name="table">表名。</param>
            <param name="enabled">是否启用（为true时启用，若要关闭则为false）。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.ExecuteNoneQuery(Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder)">
            <summary>
            执行指定的 SQL 命令，并返回受影响的记录数。
            </summary>
            <param name="Command">要执行的命令。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.ExecuteQuery(Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder)">
            <summary>
            指行指定的查询命令，并返回数据集。
            </summary>
            <param name="Command">要执行的查询。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.QueryDataTable(Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder)">
            <summary>
            指行指定的查询命令，并返回一个 DataTable 数据集。
            </summary>
            <param name="Command">要执行的命令。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.ExecuteDynamicEntity(Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder)">
            <summary>
            执行指定的查询，并返回该查询对应的动态实体对象数据集合.
            </summary>
            <param name="Command">要执行的查询命令对象.</param>
            <exception cref="T:System.Exception">在查询过程中产生错误时引发此异常.</exception>
            <returns>查询对应的动态实体对象数据集合.</returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.ExecuteReader(Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder)">
            <summary>
            执行指定的查询命令，并返回相应的数据读取器。
            </summary>
            <param name="Command">要执行的查询。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.ExecuteScalar(Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。所有其他的列和行将被忽略。
            </summary>
            <param name="Command">要执行的查询。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.DropTable(System.String,System.Data.IDbCommand)">
            <summary>
            从数据库中删除指定名称的表，删除成功则返回 true 否则返回 false .
            </summary>
            <param name="tableName">要删除的表名称.</param>
            <param name="commander">在该 DbCommand 上执行表删除操作（为空时则自动创建，默认值 null）.</param>
            <returns>删除成功则返回 true 否则返回 false .</returns>
            <exception cref="T:System.Exception">删表出错时引发异常.</exception>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.DropTableCommandText(System.String,System.Data.IDbCommand)">
            <summary>
            用于获取删除表的命令.
            </summary>
            <param name="tableName">要删除的表名.</param>
            <param name="command">用于执行在获取删除表命令时可能需要进行的查询（如删除表后相关的约束残留信息的删除命令）.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.TableExists(System.String,System.Data.IDbCommand)">
            <summary>
            若指定名称的表在数据库中存在则返回 true，否则返回 false .
            </summary>
            <param name="tableName">表名称.</param>
            <param name="commander">在该 DbCommand 上执行查询（为空时则自动创建，默认值 null）.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.CreateParameter(System.String,System.Object)">
            <summary>
            创建SQL命令参数。
            </summary>
            <param name="parameterName">参数名称。</param>
            <param name="value">参数的值。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.CreateParameter(System.String,System.Object,System.Data.ParameterDirection)">
            <summary>
            创建 SQL 命令参数。
            </summary>
            <param name="parameterName">参数名称。</param>
            <param name="value">参数的值。</param>
            <param name="direction">获取或设置一个值，该值指示参数是只可输入、只可输出、双向还是存储过程返回值参数。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbAccess.ClearError">
            <summary>
            清除以前产生的错误信息。
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.DbInterop.DbaDataReader">
            <summary>
            用于支持数据访问器连接池回收机制的数据读取器.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.DbInterop.DbaDataReader.ClosedEventHandler">
            <summary>
            用于执行数据读取器关闭后的事件的委托.
            </summary>
            <param name="connection">与该读取器关联的数据库连接.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbaDataReader.#ctor(System.Data.IDataReader,System.Data.IDbConnection)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.DbInterop.DbaDataReader"/> 的对象实例.
            </summary>
            <param name="innerReader">内置的基础数据读取器.</param>
            <param name="conn">与该数据读取器相关联的数据库连接.</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbInterop.DbaDataReader.Item(System.Int32)">
            <summary>
            获取指定索引处的列的值.
            </summary>
            <param name="i">列索引.</param>
            <returns></returns>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbInterop.DbaDataReader.Item(System.String)">
            <summary>
            获取指定名称写的值.
            </summary>
            <param name="name">列名称.</param>
            <returns></returns>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbInterop.DbaDataReader.Depth">
            <summary>
            获取一个值，该值指示当前行的嵌套深度.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbInterop.DbaDataReader.IsClosed">
            <summary>
            获取一个值，该值指示读取器是否已经关闭.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbInterop.DbaDataReader.RecordsAffected">
            <summary>
            获取通过执行SQL语句更改，插入或删除的行数.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbInterop.DbaDataReader.FieldCount">
            <summary>
            获取当前行的列数.
            </summary>
        </member>
        <member name="E:Wunion.DataAdapter.Kernel.DbInterop.DbaDataReader.Closed">
            <summary>
            该读取器被关闭后触发此事件.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbaDataReader.OnClosed">
            <summary>
            用于触发 <see cref="E:Wunion.DataAdapter.Kernel.DbInterop.DbaDataReader.Closed"/> 事件.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbaDataReader.GetBoolean(System.Int32)">
            <summary>
            获取指定索引处的列的布尔值.
            </summary>
            <param name="i">列索引.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbaDataReader.GetByte(System.Int32)">
            <summary>
            获取指定列的8位无符号整数（字节）值.
            </summary>
            <param name="i">列索引.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbaDataReader.Close">
            <summary>
            关闭该数据读取器.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbaDataReader.Dispose(System.Boolean)">
            <summary>
            释放对象占用的资源.
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbaDataReader.Dispose">
            <summary>
            释放该对象所占用的资源.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DbaDataReader.Finalize">
            <summary>
            析构函数.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.DbInterop.ReleaseTransHandler">
            <summary>
            用于执行事务释放的函数的委托。
            </summary>
            <param name="Owner">事务所属的 DBTransactionController 控制器。</param>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController">
            <summary>
            事务控制器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController.#ctor(System.Data.IDbTransaction,Wunion.DataAdapter.Kernel.DbInterop.TransactionDbAccess,Wunion.DataAdapter.Kernel.DbInterop.ReleaseTransHandler)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController"/> 事务控制器实例。
            </summary>
            <param name="trans">与数据库相关的事务对象。</param>
            <param name="transDBA">事务数据访问器（用于执行受事务控制的命令）。</param>
            <param name="release">释放事务的函数。</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController.UniqueId">
            <summary>
            获取该事务控制器的唯一标识。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController.IsCommit">
            <summary>
            获取一个值，该值指示事务是否已提交。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController.DBA">
            <summary>
            获取在事务中执行命令的访问器对象。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController.Commit">
            <summary>
            提交事务。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController.Rollback">
            <summary>
            回滚事务。
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController.Dispose(System.Boolean)">
            <summary>
            释放该对象所占用的所有资源。
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController.Dispose">
            <summary>
            释放该对象所占用的所有资源。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController.Finalize">
            <summary>
            对象终结器。
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.DbInterop.TransactionConnectionCache">
            <summary>
            用于事务的连接缓存，当有事务产生时才将 Connection 缓存到此处。事务结束释放相关连接。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbInterop.TransactionConnectionCache.CachePool">
            <summary>
            数据库连接对象。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.TransactionConnectionCache.RegisterValidTransaction(System.String,Wunion.DataAdapter.Kernel.DbInterop.DbAccess,System.Data.IDbConnection)">
            <summary>
            将事务相关的注册到待释放缓冲区.
            </summary>
            <param name="OwnerId">事务的有效唯一标识.</param>
            <param name="dba">与该事务相关的数据访问器.</param>
            <param name="conn">创建事务的连接.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.TransactionConnectionCache.ReleaseConnection(System.String)">
            <summary>
            清理有效事务注册。
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.DbInterop.TransactionCacheItem">
            <summary>
            表示事务连接关联缓存的元素.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.TransactionCacheItem.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.DbInterop.TransactionCacheItem"/> 的对象实例.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbInterop.TransactionCacheItem.DBA">
            <summary>
            对应的数据访问器.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbInterop.TransactionCacheItem.Connection">
            <summary>
            打开事务的连接.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.DbInterop.TransactionDbAccess">
            <summary>
            在事务中使用的数据访问器。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.TransactionDbAccess.#ctor(System.Data.IDbCommand,Wunion.DataAdapter.Kernel.DataEngine)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.DbInterop.TransactionDbAccess"/> 的对象实例。
            </summary>
            <param name="cmd">与事务关联的 DbCommand 对象。</param>
            <param name="owner">创建该事务的引擎对象实例。</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbInterop.TransactionDbAccess.Engine">
            <summary>
            获取创建该事务的引擎对象。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbInterop.TransactionDbAccess.parserAdapter">
            <summary>
            获取解析命令所需要的解释适配器。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbInterop.TransactionDbAccess.Errors">
            <summary>
            或者在事务过程中所产生的错误信息列表。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbInterop.TransactionDbAccess.SCOPE_IDENTITY">
            <summary>
            获取插入到当前会话的最后一个自增长字段的值。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.TransactionDbAccess.QueryLastIdentity(Wunion.DataAdapter.Kernel.CommandParser.ParserAdapter)">
            <summary>
            必须在所有SQL命令执行完成后并且数据库连接关闭前调用。
            </summary>
            <param name="adapter">解释命令所需的适配器。</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.TransactionDbAccess.ExecuteNoneQuery(Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder)">
            <summary>
            执行指定的 SQL 命令，并返回受影响的记录数。
            </summary>
            <param name="Command">CommandBuilder对象。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.TransactionDbAccess.ExecuteReader(Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder)">
            <summary>
            执行指定的查询命令，并返回相应的数据读取器。
            </summary>
            <param name="command">要执行的查询的命令构建器.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.TransactionDbAccess.ExecuteScalar(Wunion.DataAdapter.Kernel.CommandBuilders.CommandBuilder)">
            <summary>
            执行查询，并返回查询所返回的结果集中第一行的第一列。所有其他的列和行将被忽略。
            </summary>
            <param name="command">要执行的查询。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.TransactionDbAccess.TableExists(System.String)">
            <summary>
            若指定的表在数据库中存在则返回 true，否则返回 false .
            </summary>
            <param name="tableName"></param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.TransactionDbAccess.DropTable(System.String)">
            <summary>
            从数据库中删除指定的表.
            </summary>
            <param name="tableName">表名称.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbInterop.TransactionDbAccess.IdentityInsert(System.String,System.Boolean)">
            <summary>
            开启或关闭指定表中自增长字段值的插入操作。
            </summary>
            <param name="table">表名。</param>
            <param name="enabled">是否启用（为true时启用，若要关闭则为false）。</param>
        </member>
        <!-- Badly formed XML comment ignored for member "T:Wunion.DataAdapter.Kernel.DbValueConverterOptions" -->
        <member name="F:Wunion.DataAdapter.Kernel.DbValueConverterOptions.Converters">
            <summary>
            用于存储数据库值的转换器支持.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbValueConverterOptions.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.DbValueConverterOptions"/> 的对象实例.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbValueConverterOptions.Add(System.Type,Wunion.DataAdapter.Kernel.IDbValueConverter)">
            <summary>
            添加一个数据库类型转换器.
            </summary>
            <param name="dest">添加的转换器针对的类型.</param>
            <param name="converter">转换器对象实例.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbValueConverterOptions.Get(System.Type)">
            <summary>
            获取指定类型的数据库值转换器（若不存在则返回 null）.
            </summary>
            <param name="valueType">值的类型.</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.DefaultDbConnectionPool">
            <summary>
            表示数据库连接池对象.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.DefaultDbConnectionPool.IdlePool">
            <summary>
            空闲连接池.
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.DefaultDbConnectionPool.usingPool">
            <summary>
            正在占用的连接池.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DefaultDbConnectionPool.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.DefaultDbConnectionPool"/> 的对象实列.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DefaultDbConnectionPool.RequestTimeout">
            <summary>
            获取或设置请求连接的超时时间（超过该时间未获得连接分配则引发异常）.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DefaultDbConnectionPool.ReleaseTimeout">
            <summary>
            自连接分配开始，在此时间后仍然未释放的连接进行强制回收.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DefaultDbConnectionPool.MaximumConnections">
            <summary>
            获取或设置连接池的最大连接数.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DefaultDbConnectionPool.Count">
            <summary>
            获取连接池中现有的连接数.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DefaultDbConnectionPool.Add(System.Data.IDbConnection)">
            <summary>
            用于将给定的连接添加到连接池中，若连接池已满则引发异常.
            </summary>
            <param name="connection">要加入连接池的连接.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DefaultDbConnectionPool.GetConnection(Wunion.DataAdapter.Kernel.MakeConnectionFactory)">
            <summary>
            从连接池中获取一个数据库连接.
            </summary>
            <param name="makeFactory">当连接池为空时用于创建连接的方法.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DefaultDbConnectionPool.ReleaseConnection(System.Data.IDbConnection)">
            <summary>
            用于收回指定的连接但不断开连接.
            </summary>
            <param name="connection">要收回的连接.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DefaultDbConnectionPool.RunForcedRelease">
            <summary>
            运行连接的强制回收任务.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DefaultDbConnectionPool.Dispose(System.Boolean)">
            <summary>
            释放连接池占用的资源.
            </summary>
            <param name="disposing">手动释放则为 true，否则为 false.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DefaultDbConnectionPool.Dispose">
            <summary>
            释放连接池占用的资源.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DefaultDbConnectionPool.Finalize">
            <summary>
            析构函数.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.DefaultDbConnectionPool.ConnectionPoolItem">
            <summary>
            表示连接池中的连接项.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DefaultDbConnectionPool.ConnectionPoolItem.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.DefaultDbConnectionPool.ConnectionPoolItem"/> 的对象实例.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DefaultDbConnectionPool.ConnectionPoolItem.LastUsed">
            <summary>
            该连接的最后一次使用时间.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DefaultDbConnectionPool.ConnectionPoolItem.Connection">
            <summary>
            数据库连接对象.
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.MakeConnectionFactory">
            <summary>
            用于创建数据库连接对象的工厂方法委托.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.IDbConnectionPool">
            <summary>
            用于规范华数据库连接池的接口.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.IDbConnectionPool.RequestTimeout">
            <summary>
            获取或设置请求连接的超时时间（超过该时间未获得连接分配则引发异常）.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.IDbConnectionPool.ReleaseTimeout">
            <summary>
            自连接分配开始，在此时间后仍然未释放的连接进行强制回收.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.IDbConnectionPool.MaximumConnections">
            <summary>
            获取或设置连接池的最大连接数.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.IDbConnectionPool.Count">
            <summary>
            获取连接池中现有的连接数.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.IDbConnectionPool.GetConnection(Wunion.DataAdapter.Kernel.MakeConnectionFactory)">
            <summary>
            从连接池中获取一个数据库连接.
            </summary>
            <param name="makeFactory">当连接池为空时用于创建连接的方法.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.IDbConnectionPool.ReleaseConnection(System.Data.IDbConnection)">
            <summary>
            用于收回指定的连接但不断开连接.
            </summary>
            <param name="connection">要收回的连接.</param>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.IDbValueConverter">
            <summary>
            用于实现从指定的自定义类型将值转换到数据库支持的值的转换器接口.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.IDbValueConverter.Parse(System.Object)">
            <summary>
            将指定的值转换到自定义类型.
            </summary>
            <param name="value">要转换的值.</param>
            <returns>返回成功转换后的类型值.</returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.IDbValueConverter.ConvertTo(System.Object,System.Type)">
            <summary>
            将自定义类型的值转换为给定的数据库支持的值类型.
            </summary>
            <param name="value">原始类型值.</param>
            <param name="dest">要转换的目标对象.</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.DbValueConverter`1">
            <summary>
            用于实现从指定的自定义类型将值转换到数据库支持的值的转换器基类
            （可在构造函数中设置 DefaultValue 属性来自定义默认的值）.
            </summary>
            <typeparam name="TSource"></typeparam>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DbValueConverter`1.DefaultValue">
            <summary>
            获取或设置默认值.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbValueConverter`1.#ctor">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.DbValueConverter`1"/> 的对象实例.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbValueConverter`1.ConvertTo(`0,System.Type,System.Object@)">
            <summary>
            实现从原始值到数据库支持的目标值的转换.
            </summary>
            <param name="value">原始值.</param>
            <param name="dest">数据库支持的目标值的类型.</param>
            <param name="buffer">用于输出转换结果的缓冲区.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbValueConverter`1.ConvertTo(System.Object,System.Type)">
            <summary>
            将自定义类型的值转换为给定的数据库支持的值类型.
            </summary>
            <param name="value">原始类型值.</param>
            <param name="dest">要转换的目标对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbValueConverter`1.Parse(System.Object,`0@)">
            <summary>
            实现从数据库值转换为自定义类型的值.
            </summary>
            <param name="value">数据库中查获的值.</param>
            <param name="buffer">用于输出转换结果的缓冲区.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DbValueConverter`1.Parse(System.Object)">
            <summary>
            将指定的值转换到自定义类型.
            </summary>
            <param name="value">要转换的值.</param>
            <returns>返回成功转换后的类型值.</returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.Querying.IncludeQueryBuilder`1">
            <summary>
            用于辅助构建联合查询.
            </summary>
            <typeparam name="TDAO"></typeparam>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.IncludeQueryBuilder`1.#ctor(System.Collections.Generic.Dictionary{System.Type,Wunion.DataAdapter.Kernel.Querying.QueryDao})">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.Querying.IncludeQueryBuilder`1"/> 的对象实例.
            </summary>
            <param name="daos">已加入联合查询的实体数据访问器.</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.Querying.IncludeQueryBuilder`1.First">
            <summary>
            联合查询中的第一个表.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.IncludeQueryBuilder`1.tbl``1">
            <summary>
            获取联合查询中指定数据访问器对应的表.
            </summary>
            <typeparam name="TargetDao"></typeparam>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.Querying.QueryBuilder`1">
            <summary>
            表示数据库的查询构建器.
            </summary>
            <typeparam name="TDAO"></typeparam>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryBuilder`1.#ctor(Wunion.DataAdapter.Kernel.CodeFirst.IDbTableContext)">
            <summary>
            创建一个查询构建器的对象实例.
            </summary>
            <param name="table">主要查询的数据表上下文.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryBuilder`1.SetInclude``1(``0,System.Type,System.Func{Wunion.DataAdapter.Kernel.Querying.IncludeQueryBuilder{`0},System.Object[]})">
            <summary>
            设置查询构建器的关联查询.
            </summary>
            <typeparam name="TForeignDao"></typeparam>
            <param name="foreignDao"></param>
            <param name="t"></param>
            <param name="expression"></param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryBuilder`1.Include``1(System.Func{Wunion.DataAdapter.Kernel.Querying.IncludeQueryBuilder{`0},System.Object[]})">
            <summary>
            在该查询中包含一个外键关联的联合查询，若要查询的表与指定的泛型参数 TForeignDao 数据访问器相关的表未定义外键关系，则引发 <see cref="T:System.NotSupportedException"/>异常.
            </summary>
            <typeparam name="TForeignDao">外键对应的数据访问器.</typeparam>
            <param name="expression">联合的表要查出的定段.</param>
            <exception cref="T:System.NotSupportedException">查询的表与指定的泛型参数 TForeignDao 数据访问器相关的表未定义外键关系时发生.</exception>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryBuilder`1.Include``1(System.String,System.Func{Wunion.DataAdapter.Kernel.Querying.IncludeQueryBuilder{`0},System.Object[]})">
            <summary>
            在该查询中包含一个外键关联的联合查询，若要查询的表与指定的泛型参数 TForeignDao 数据访问器相关的表未定义外键关系，则引发 <see cref="T:System.NotSupportedException"/>异常.
            </summary>
            <typeparam name="TForeignDao">外键对应的数据访问器.</typeparam>
            <param name="tableName">显示指定要关联的表名称.</param>
            <param name="expression">联合的表要查出的定段.</param>
            <exception cref="T:System.NotSupportedException">查询的表与指定的泛型参数 TForeignDao 数据访问器相关的表未定义外键关系时发生.</exception>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryBuilder`1.Where``1(System.Func{``0,System.Object[]})">
            <summary>
            构建查询条件.
            </summary>
            <typeparam name="TargetDao">目标实体的查询娄据访问器类型.</typeparam>
            <param name="condition">用于返回查询条件的方法.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryBuilder`1.AndWhere``1(System.Func{``0,System.Object[]})">
            <summary>
            构建与前一个条件形成逻辑与（即 and ）运算的查询条件.
            </summary>
            <typeparam name="TargetDao"></typeparam>
            <param name="condition">用于返回查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryBuilder`1.OrWhere``1(System.Func{``0,System.Object[]})">
            <summary>
            构建与前一个条件形成逻辑与（即 or ）或算的查询条件.
            </summary>
            <typeparam name="TargetDao"></typeparam>
            <param name="condition">用于返回查询条件</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryBuilder`1.Select(System.Func{Wunion.DataAdapter.Kernel.Querying.IncludeQueryBuilder{`0},Wunion.DataAdapter.Kernel.CommandBuilders.IDescription[]})">
            <summary>
            选择要查询的字段.
            </summary>
            <param name="selector">用于选择字段.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryBuilder`1.CountBuild">
            <summary>
            构建 COUNT 查询命令.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryBuilder`1.Build(System.Action{Wunion.DataAdapter.Kernel.Querying.IncludeQueryBuilder{`0},Wunion.DataAdapter.Kernel.CommandBuilders.SelectBlock})">
            <summary>
            构造查询命令.
            </summary>
            <param name="options">用于设置更多的查询选项，例如排序、分页等.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryBuilder`1.Count(System.Object)">
            <summary>
            查询符合的记录数量.
            </summary>
            <param name="controller">在该批处理器中执行查询.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryBuilder`1.Create(Wunion.DataAdapter.Kernel.CodeFirst.IDbTableContext)">
            <summary>
            创建一个查询构建器.
            </summary>
            <typeparam name="TDao">查询数据访问器的类型.</typeparam>
            <param name="table">默认要查询的数据表.</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.Querying.QueryCommandExecuter">
            <summary>
            查询命令执行器.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryCommandExecuter.#ctor(Wunion.DataAdapter.Kernel.CodeFirst.DbContext,Wunion.DataAdapter.Kernel.CommandBuilders.DbCommandBuilder)">
            <summary>
            创建一个查询命令的执行器.
            </summary>
            <param name="db">数据库上下文.</param>
            <param name="cb">数据库查询命令构建器.</param>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryCommandExecuter.ExecuteReader(Wunion.DataAdapter.Kernel.DataEngine,System.Object)">
            <summary>
            执行命令并返回一个数据读取器.
            </summary>
            <param name="controller">在其中执行命令的事务控制器(<see cref="T:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController"/>)或批处理(<see cref="T:Wunion.DataAdapter.Kernel.BatchCommander"/>)对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryCommandExecuter.ExecuteScalar(System.Object)">
            <summary>
            指行查询并返回结果中第一行第一列的数据.
            </summary>
            <param name="controller">在其中执行命令的事务控制器(<see cref="T:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController"/>)或批处理(<see cref="T:Wunion.DataAdapter.Kernel.BatchCommander"/>)对象.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryCommandExecuter.ExecuteScalarAsync(System.Object)">
            <summary>
            指行查询并返回结果中第一行第一列的数据（异步方法）.
            </summary>
            <param name="controller">在其中执行命令的事务控制器(<see cref="T:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController"/>)或批处理(<see cref="T:Wunion.DataAdapter.Kernel.BatchCommander"/>)对象.</param>
            <returns></returns>
            <exception cref="T:System.Exception"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryCommandExecuter.ToList``1(System.Object)">
            <summary>
             执行查询并将结果返回为非实体对象集合.
            </summary>
            <typeparam name="T">目标对象类型.</typeparam>
            <param name="controller">在其中执行命令的事务控制器(<see cref="T:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController"/>)或批处理(<see cref="T:Wunion.DataAdapter.Kernel.BatchCommander"/>)对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryCommandExecuter.ToListAsyn``1(System.Object)">
            <summary>
             执行查询并将结果返回为非实体对象集合（异步方法）.
            </summary>
            <typeparam name="T">目标对象类型.</typeparam>
            <param name="controller">在其中执行命令的事务控制器(<see cref="T:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController"/>)或批处理(<see cref="T:Wunion.DataAdapter.Kernel.BatchCommander"/>)对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryCommandExecuter.ToEntityList``1(System.Object)">
            <summary>
            执行查询并将结果返回为实体集合.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="controller">在其中执行命令的事务控制器(<see cref="T:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController"/>)或批处理(<see cref="T:Wunion.DataAdapter.Kernel.BatchCommander"/>)对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryCommandExecuter.ToEntityListAsync``1(System.Object)">
            <summary>
            执行查询并将结果返回为实体集合（异步方法）.
            </summary>
            <typeparam name="TEntity"></typeparam>
            <param name="controller">在其中执行命令的事务控制器(<see cref="T:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController"/>)或批处理(<see cref="T:Wunion.DataAdapter.Kernel.BatchCommander"/>)对象.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryCommandExecuter.ToDynamicList(System.Object,System.Func{System.String,System.Object,System.Type,System.Object})">
            <summary>
            执行查询并将结果返回为动态实体集合.
            </summary>
            <param name="controller">在其中执行命令的事务控制器(<see cref="T:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController"/>)或批处理(<see cref="T:Wunion.DataAdapter.Kernel.BatchCommander"/>)对象.</param>
            <param name="converter">用于转换字段值的数据类型.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryCommandExecuter.ToDynamicListAsync(System.Object,System.Func{System.String,System.Object,System.Type,System.Object})">
            <summary>
            执行查询并将结果返回为动态实体集合.
            </summary>
            <param name="controller">在其中执行命令的事务控制器(<see cref="T:Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController"/>)或批处理(<see cref="T:Wunion.DataAdapter.Kernel.BatchCommander"/>)对象.</param>
            <param name="converter">用于转换字段值的数据类型.</param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.Querying.QueryDao">
            <summary>
            构建查询的数据访问描述（主用于描述实体属性对应的查询字段命令）.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryDao.#ctor(Wunion.DataAdapter.Kernel.CodeFirst.DbContext)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.Querying.QueryDao"/> 的对象实例.
            </summary>
            <param name="dbc">数据库上下文对象.</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.Querying.QueryDao.GenerateTableName">
            <summary>
            在字段前添加表名称则为 true，否则为 false.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.Querying.QueryDao.TableName">
            <summary>
            获取或设置表名称.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.Querying.QueryDao.db">
            <summary>
            获取或设置数据库上下文.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryDao.GetField(System.String)">
            <summary>
            获取指定的查询字段.
            </summary>
            <param name="name">字段名.</param>
            <returns></returns>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.Querying.QueryDao.EntityType">
            <summary>
            该数据访问器对应的实体类型.
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.Querying.QueryDao.All">
            <summary>
            获取所有字段的命令描述.
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryDao.GetTableContext">
            <summary>
            获取该查询访问器对应的表上下文对象（在调用此方法前应先设置 <see cref="P:Wunion.DataAdapter.Kernel.Querying.QueryDao.TableName"/> 属性）.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryDao.GetTableContext(System.String)">
            <summary>
            获取该数据访问器对应的表上下文对象.
            </summary>
            <param name="name">表名称（为 null 则返回符合该查询访问器的第一个表上下文）.</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.Querying.QueryDao.GetAllFields">
            <summary>
            获取所有字段的命令描述.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.QuickDataChangerSubmission">
            <summary>
            扩展快捷数据更改器的批量提交标识。
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.QuickDataChangerSubmission.Ignore">
            <summary>
            表示忽略该数据。
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.QuickDataChangerSubmission.Insert">
            <summary>
            表示插入数据。
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.QuickDataChangerSubmission.Update">
            <summary>
            表示更新数据。
            </summary>
        </member>
        <member name="F:Wunion.DataAdapter.Kernel.QuickDataChangerSubmission.Delete">
            <summary>
            表示删除数据。
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.DataRowSubmission">
            <summary>
            表示数据行回写库时的提交方式。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.DataRowSubmission.#ctor(Wunion.DataAdapter.Kernel.QuickDataChangerSubmission)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.DataRowSubmission"/> 的对象实例。
            </summary>
            <param name="submission">数据行的提交方式。</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataRowSubmission.Submission">
            <summary>
            获取数据行的提交方式。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataRowSubmission.Conditions">
            <summary>
            获取或设置作为更新或删除数据行的条件（当是插入操作时不必设置。但如果更新和删除时不设置该属性，则会被忽略）。
            </summary>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.DataRowSubmission.NotInsertFields">
            <summary>
            获取或设置更新或插入操作时不对其进行写操作的字段（更新时不改的字段，或插入时不赋值的字段）。
            </summary>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.BatchSaveDataRowJudgment">
            <summary>
            用于在执行批量更新
            </summary>
            <param name="Row"></param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.BatchSaveSpeedRowJudgment">
            <summary>
            用于在执行批量更新
            </summary>
            <param name="Row"></param>
            <returns></returns>
        </member>
        <member name="T:Wunion.DataAdapter.Kernel.QuickDataChanger">
            <summary>
            扩展快捷数据更改器。使用该类可避免手动通过 DbCommandBuilder 来建筑 INSERT 或 UPDATE 命令。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.QuickDataChanger.#ctor(Wunion.DataAdapter.Kernel.DataEngine)">
            <summary>
            创建一个 <see cref="T:Wunion.DataAdapter.Kernel.QuickDataChanger"/> 的对象实例。
            </summary>
            <param name="engine">执行数据库交互的引擎对象。</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.QuickDataChanger.Engine">
            <summary>
            获取数据引擎。
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.QuickDataChanger.#ctor(Wunion.DataAdapter.Kernel.DbInterop.DBTransactionController,Wunion.DataAdapter.Kernel.DataEngine)">
            <summary>
            创建一个与事务关联的 <see cref="T:Wunion.DataAdapter.Kernel.QuickDataChanger"/> 对象实例。
            </summary>
            <param name="transController">关联到该对象的事务控制器。</param>
            <param name="engine">执行数据库交互的引擎对象。</param>
        </member>
        <member name="P:Wunion.DataAdapter.Kernel.QuickDataChanger.Conditions">
            <summary>
            添加用于更新数据时的条件，元素的语法与： DbCommander.Update().Where() 方法的参数中的元素语法一致。
            例：
            <para>Conditions.Add(td.Field("field1") == "测试");</para>
            <para>Conditions.Add(exp.And);</para>
            <para>Conditions.Add(Fun.BetweenAnd(td.Field("createdate"), time1, time2));</para>
            </summary>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.QuickDataChanger.Insert(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            插入数据。
            </summary>
            <param name="TableName">表名称。</param>
            <param name="data">包含要插入的数据的字典（字典的键必与数据库目标表的字段一致）。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.QuickDataChanger.Update(System.String,System.Collections.Generic.Dictionary{System.String,System.Object})">
            <summary>
            更新数据。
            </summary>
            <param name="TableName">表名称。</param>
            <param name="data">包含要插入的数据的字典（字典的键必与数据库目标表的字段一致）。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.QuickDataChanger.SaveToDataBase(System.String,System.Collections.Generic.Dictionary{System.String,System.Object},System.Boolean)">
            <summary>
            将数据保存到数据库中。
            </summary>
            <param name="TableName">表名称。</param>
            <param name="data">包含要插入的数据的字典（字典的键必与数据库目标表的字段一致）。</param>
            <param name="executeUpdate">更新模式。为 true 时将以更新的方式执行，如果此时没有设置 Conditions 条件，则更个更新将没有条件约束。为 false 时为插入数据。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.QuickDataChanger.Delete(System.String)">
            <summary>
            从删除。
            </summary>
            <param name="TableName">要从中删除数据的表（条件请指定 Conditions 属性）。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.QuickDataChanger.NotInsertFieldsContains(Wunion.DataAdapter.Kernel.DataRowSubmission,System.String)">
            <summary>
            检查指定的字段是否在不插入（或更新）的字段列表中。
            </summary>
            <param name="rowSubmission">对该行的处理指示器。</param>
            <param name="Field">要检查的字段名称。</param>
            <returns>若指定的字段包含在不插入（或更新）的字段列表中时返回 true, 否则返回 false</returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.QuickDataChanger.RowSubmissionCommand(Wunion.DataAdapter.Kernel.DataCollection.SpeedDataRow,Wunion.DataAdapter.Kernel.DataRowSubmission)">
            <summary>
            判断并构建指定行被指示的提交命令。
            </summary>
            <param name="Row">被提交的行。</param>
            <param name="rowSubmission">对该行的处理指示。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.QuickDataChanger.BatchSaveDataTable(Wunion.DataAdapter.Kernel.DataCollection.SpeedDataTable,Wunion.DataAdapter.Kernel.BatchSaveSpeedRowJudgment)">
            <summary>
            将一个 DataTable 中的改动批量保存回数据库（仅针对单表查询所得的数据集，并且在调用批量更新之前必须将数据库中的要更新的表名称设置为 DataTable 对像的 TableName 属性）。
            </summary>
            <param name="Table">需要对其进行批量保存的数据集。</param>
            <param name="rowJudgment">用于判断数据行的操作处理的函数，在该函数中您需要判断给定的 Table 的某个字段在当前行的值。并通过该值来告诉程序应该如何处理此行。
            <para>例如：在 DataTable 中设置一个名为“STATUS”的状态列表示更新状态。</para>
            <para>      0 表示未无改动，1 表示新增， 2 表示更新（任何一列的数据已被更改），3 表示删除（用户进行了删除时标记为此值，而不是直接从Table中删除）</para>
            <para>示例代码请参见更新日志中。</para>
            </param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.QuickDataChanger.DataRowSubmissionCommand(System.Data.DataRow,Wunion.DataAdapter.Kernel.DataRowSubmission)">
            <summary>
            判断并构建指定行被指示的提交命令。
            </summary>
            <param name="Row">被提交的行。</param>
            <param name="rowSubmission">对该行的处理指示。</param>
            <returns></returns>
        </member>
        <member name="M:Wunion.DataAdapter.Kernel.QuickDataChanger.BatchSaveDataTable(System.Data.DataTable,Wunion.DataAdapter.Kernel.BatchSaveDataRowJudgment)">
            <summary>
            将一个 DataTable 中的改动批量保存回数据库（仅针对单表查询所得的数据集，并且在调用批量更新之前必须将数据库中的要更新的表名称设置为 DataTable 对像的 TableName 属性）。
            </summary>
            <param name="Table">需要对其进行批量保存的数据集。</param>
            <param name="rowJudgment">用于判断数据行的操作处理的函数，在该函数中您需要判断给定的 DataTable 的某个字段在当前行的值。并通过该值来告诉程序应该如何处理此行。
            <para>例如：在 DataTable 中设置一个名为“STATUS”的状态列表示更新状态。</para>
            <para>      0 表示未无改动，1 表示新增， 2 表示更新（任何一列的数据已被更改），3 表示删除（用户进行了删除时标记为此值，而不是直接从DataTable中删除）</para>
            <para>示例代码请参见更新日志中。</para>
            </param>
            <returns></returns>
        </member>
    </members>
</doc>
